/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef access_TYPES_H
#define access_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class CGate;

class CBtyAlarm;

class CBtyData;

class CBtyCellData;

class CBtyBankData;

class CBtyBankStatus;

class CBatteryCellData;

class CBatteryData;

class CBatteryBankData;

class CBtyCmd;

class CBtyResTestCmd;

class CBatteryResData;

class CGeneralData;

class CMeterData;

class CConfigData;

class CAppInfo;

class CAppUpdataCmd;

class CAppUpdataStatus;

class CGateParams;

class CSMS;

class CQuery;

class CAlarm;

class CAlarmMatch;

typedef struct _CGate__isset {
  _CGate__isset() : gateID(false) {}
  bool gateID :1;
} _CGate__isset;

class CGate : public virtual ::apache::thrift::TBase {
 public:

  CGate(const CGate&);
  CGate& operator=(const CGate&);
  CGate() : gateID() {
  }

  virtual ~CGate() throw();
  std::string gateID;

  _CGate__isset __isset;

  void __set_gateID(const std::string& val);

  bool operator == (const CGate & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    return true;
  }
  bool operator != (const CGate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CGate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CGate &a, CGate &b);

inline std::ostream& operator<<(std::ostream& out, const CGate& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CBtyAlarm__isset {
  _CBtyAlarm__isset() : almNO(false), gateID(false), bankID(false), cellID(false), kind(false), level(false), value(false), bTime(false), eTime(false) {}
  bool almNO :1;
  bool gateID :1;
  bool bankID :1;
  bool cellID :1;
  bool kind :1;
  bool level :1;
  bool value :1;
  bool bTime :1;
  bool eTime :1;
} _CBtyAlarm__isset;

class CBtyAlarm : public virtual ::apache::thrift::TBase {
 public:

  CBtyAlarm(const CBtyAlarm&);
  CBtyAlarm& operator=(const CBtyAlarm&);
  CBtyAlarm() : almNO(), gateID(), bankID(), cellID(), kind(0), level(0), value(0), bTime(0), eTime(0) {
  }

  virtual ~CBtyAlarm() throw();
  std::string almNO;
  std::string gateID;
  std::string bankID;
  std::string cellID;
  int32_t kind;
  int32_t level;
  double value;
  int64_t bTime;
  int64_t eTime;

  _CBtyAlarm__isset __isset;

  void __set_almNO(const std::string& val);

  void __set_gateID(const std::string& val);

  void __set_bankID(const std::string& val);

  void __set_cellID(const std::string& val);

  void __set_kind(const int32_t val);

  void __set_level(const int32_t val);

  void __set_value(const double val);

  void __set_bTime(const int64_t val);

  void __set_eTime(const int64_t val);

  bool operator == (const CBtyAlarm & rhs) const
  {
    if (!(almNO == rhs.almNO))
      return false;
    if (!(gateID == rhs.gateID))
      return false;
    if (!(bankID == rhs.bankID))
      return false;
    if (!(cellID == rhs.cellID))
      return false;
    if (!(kind == rhs.kind))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(bTime == rhs.bTime))
      return false;
    if (!(eTime == rhs.eTime))
      return false;
    return true;
  }
  bool operator != (const CBtyAlarm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CBtyAlarm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CBtyAlarm &a, CBtyAlarm &b);

inline std::ostream& operator<<(std::ostream& out, const CBtyAlarm& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CBtyData__isset {
  _CBtyData__isset() : vol(false), cur(false), temp(false), stats(false), time(false) {}
  bool vol :1;
  bool cur :1;
  bool temp :1;
  bool stats :1;
  bool time :1;
} _CBtyData__isset;

class CBtyData : public virtual ::apache::thrift::TBase {
 public:

  CBtyData(const CBtyData&);
  CBtyData& operator=(const CBtyData&);
  CBtyData() : vol(0), cur(0), temp(0), time(0) {
  }

  virtual ~CBtyData() throw();
  double vol;
  double cur;
  double temp;
  std::vector<int32_t>  stats;
  int64_t time;

  _CBtyData__isset __isset;

  void __set_vol(const double val);

  void __set_cur(const double val);

  void __set_temp(const double val);

  void __set_stats(const std::vector<int32_t> & val);

  void __set_time(const int64_t val);

  bool operator == (const CBtyData & rhs) const
  {
    if (!(vol == rhs.vol))
      return false;
    if (!(cur == rhs.cur))
      return false;
    if (!(temp == rhs.temp))
      return false;
    if (!(stats == rhs.stats))
      return false;
    if (!(time == rhs.time))
      return false;
    return true;
  }
  bool operator != (const CBtyData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CBtyData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CBtyData &a, CBtyData &b);

inline std::ostream& operator<<(std::ostream& out, const CBtyData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CBtyCellData__isset {
  _CBtyCellData__isset() : devID(false), index(false), values(false) {}
  bool devID :1;
  bool index :1;
  bool values :1;
} _CBtyCellData__isset;

class CBtyCellData : public virtual ::apache::thrift::TBase {
 public:

  CBtyCellData(const CBtyCellData&);
  CBtyCellData& operator=(const CBtyCellData&);
  CBtyCellData() : devID(), index(0) {
  }

  virtual ~CBtyCellData() throw();
  std::string devID;
  int32_t index;
  std::vector<CBtyData>  values;

  _CBtyCellData__isset __isset;

  void __set_devID(const std::string& val);

  void __set_index(const int32_t val);

  void __set_values(const std::vector<CBtyData> & val);

  bool operator == (const CBtyCellData & rhs) const
  {
    if (!(devID == rhs.devID))
      return false;
    if (!(index == rhs.index))
      return false;
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const CBtyCellData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CBtyCellData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CBtyCellData &a, CBtyCellData &b);

inline std::ostream& operator<<(std::ostream& out, const CBtyCellData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CBtyBankData__isset {
  _CBtyBankData__isset() : devID(false), value(false), totalChg(false), totalDischg(false), cells(false) {}
  bool devID :1;
  bool value :1;
  bool totalChg :1;
  bool totalDischg :1;
  bool cells :1;
} _CBtyBankData__isset;

class CBtyBankData : public virtual ::apache::thrift::TBase {
 public:

  CBtyBankData(const CBtyBankData&);
  CBtyBankData& operator=(const CBtyBankData&);
  CBtyBankData() : devID(), totalChg(0), totalDischg(0) {
  }

  virtual ~CBtyBankData() throw();
  std::string devID;
  CBtyData value;
  int32_t totalChg;
  int32_t totalDischg;
  std::vector<CBtyCellData>  cells;

  _CBtyBankData__isset __isset;

  void __set_devID(const std::string& val);

  void __set_value(const CBtyData& val);

  void __set_totalChg(const int32_t val);

  void __set_totalDischg(const int32_t val);

  void __set_cells(const std::vector<CBtyCellData> & val);

  bool operator == (const CBtyBankData & rhs) const
  {
    if (!(devID == rhs.devID))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(totalChg == rhs.totalChg))
      return false;
    if (!(totalDischg == rhs.totalDischg))
      return false;
    if (!(cells == rhs.cells))
      return false;
    return true;
  }
  bool operator != (const CBtyBankData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CBtyBankData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CBtyBankData &a, CBtyBankData &b);

inline std::ostream& operator<<(std::ostream& out, const CBtyBankData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CBtyBankStatus__isset {
  _CBtyBankStatus__isset() : devID(false), status(false), time(false) {}
  bool devID :1;
  bool status :1;
  bool time :1;
} _CBtyBankStatus__isset;

class CBtyBankStatus : public virtual ::apache::thrift::TBase {
 public:

  CBtyBankStatus(const CBtyBankStatus&);
  CBtyBankStatus& operator=(const CBtyBankStatus&);
  CBtyBankStatus() : devID(), status(0), time(0) {
  }

  virtual ~CBtyBankStatus() throw();
  std::string devID;
  int32_t status;
  int64_t time;

  _CBtyBankStatus__isset __isset;

  void __set_devID(const std::string& val);

  void __set_status(const int32_t val);

  void __set_time(const int64_t val);

  bool operator == (const CBtyBankStatus & rhs) const
  {
    if (!(devID == rhs.devID))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(time == rhs.time))
      return false;
    return true;
  }
  bool operator != (const CBtyBankStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CBtyBankStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CBtyBankStatus &a, CBtyBankStatus &b);

inline std::ostream& operator<<(std::ostream& out, const CBtyBankStatus& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CBatteryCellData__isset {
  _CBatteryCellData__isset() : devID(false), v(false), c(false), t(false), battStatus(false), cStatus(false), bankStatus(false) {}
  bool devID :1;
  bool v :1;
  bool c :1;
  bool t :1;
  bool battStatus :1;
  bool cStatus :1;
  bool bankStatus :1;
} _CBatteryCellData__isset;

class CBatteryCellData : public virtual ::apache::thrift::TBase {
 public:

  CBatteryCellData(const CBatteryCellData&);
  CBatteryCellData& operator=(const CBatteryCellData&);
  CBatteryCellData() : devID(), v(0), c(0), t(0), cStatus(0) {
  }

  virtual ~CBatteryCellData() throw();
  std::string devID;
  double v;
  double c;
  double t;
  std::vector<int32_t>  battStatus;
  int32_t cStatus;
  std::vector<int32_t>  bankStatus;

  _CBatteryCellData__isset __isset;

  void __set_devID(const std::string& val);

  void __set_v(const double val);

  void __set_c(const double val);

  void __set_t(const double val);

  void __set_battStatus(const std::vector<int32_t> & val);

  void __set_cStatus(const int32_t val);

  void __set_bankStatus(const std::vector<int32_t> & val);

  bool operator == (const CBatteryCellData & rhs) const
  {
    if (!(devID == rhs.devID))
      return false;
    if (!(v == rhs.v))
      return false;
    if (!(c == rhs.c))
      return false;
    if (!(t == rhs.t))
      return false;
    if (!(battStatus == rhs.battStatus))
      return false;
    if (!(cStatus == rhs.cStatus))
      return false;
    if (!(bankStatus == rhs.bankStatus))
      return false;
    return true;
  }
  bool operator != (const CBatteryCellData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CBatteryCellData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CBatteryCellData &a, CBatteryCellData &b);

inline std::ostream& operator<<(std::ostream& out, const CBatteryCellData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CBatteryData__isset {
  _CBatteryData__isset() : time(false), v(false), c(false), cells(false) {}
  bool time :1;
  bool v :1;
  bool c :1;
  bool cells :1;
} _CBatteryData__isset;

class CBatteryData : public virtual ::apache::thrift::TBase {
 public:

  CBatteryData(const CBatteryData&);
  CBatteryData& operator=(const CBatteryData&);
  CBatteryData() : time(0), v(0), c(0) {
  }

  virtual ~CBatteryData() throw();
  int64_t time;
  double v;
  double c;
  std::vector<CBatteryCellData>  cells;

  _CBatteryData__isset __isset;

  void __set_time(const int64_t val);

  void __set_v(const double val);

  void __set_c(const double val);

  void __set_cells(const std::vector<CBatteryCellData> & val);

  bool operator == (const CBatteryData & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(v == rhs.v))
      return false;
    if (!(c == rhs.c))
      return false;
    if (!(cells == rhs.cells))
      return false;
    return true;
  }
  bool operator != (const CBatteryData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CBatteryData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CBatteryData &a, CBatteryData &b);

inline std::ostream& operator<<(std::ostream& out, const CBatteryData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CBatteryBankData__isset {
  _CBatteryBankData__isset() : devID(false), totalChg(false), totalDischg(false), temp(false), zone(false), datas(false) {}
  bool devID :1;
  bool totalChg :1;
  bool totalDischg :1;
  bool temp :1;
  bool zone :1;
  bool datas :1;
} _CBatteryBankData__isset;

class CBatteryBankData : public virtual ::apache::thrift::TBase {
 public:

  CBatteryBankData(const CBatteryBankData&);
  CBatteryBankData& operator=(const CBatteryBankData&);
  CBatteryBankData() : devID(), totalChg(0), totalDischg(0), temp(0), zone(0) {
  }

  virtual ~CBatteryBankData() throw();
  std::string devID;
  int32_t totalChg;
  int32_t totalDischg;
  double temp;
  int32_t zone;
  std::vector<CBatteryData>  datas;

  _CBatteryBankData__isset __isset;

  void __set_devID(const std::string& val);

  void __set_totalChg(const int32_t val);

  void __set_totalDischg(const int32_t val);

  void __set_temp(const double val);

  void __set_zone(const int32_t val);

  void __set_datas(const std::vector<CBatteryData> & val);

  bool operator == (const CBatteryBankData & rhs) const
  {
    if (!(devID == rhs.devID))
      return false;
    if (!(totalChg == rhs.totalChg))
      return false;
    if (!(totalDischg == rhs.totalDischg))
      return false;
    if (!(temp == rhs.temp))
      return false;
    if (!(zone == rhs.zone))
      return false;
    if (!(datas == rhs.datas))
      return false;
    return true;
  }
  bool operator != (const CBatteryBankData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CBatteryBankData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CBatteryBankData &a, CBatteryBankData &b);

inline std::ostream& operator<<(std::ostream& out, const CBatteryBankData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CBtyCmd__isset {
  _CBtyCmd__isset() : gateID(false), devID(false) {}
  bool gateID :1;
  bool devID :1;
} _CBtyCmd__isset;

class CBtyCmd : public virtual ::apache::thrift::TBase {
 public:

  CBtyCmd(const CBtyCmd&);
  CBtyCmd& operator=(const CBtyCmd&);
  CBtyCmd() : gateID(), devID() {
  }

  virtual ~CBtyCmd() throw();
  std::string gateID;
  std::string devID;

  _CBtyCmd__isset __isset;

  void __set_gateID(const std::string& val);

  void __set_devID(const std::string& val);

  bool operator == (const CBtyCmd & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    if (!(devID == rhs.devID))
      return false;
    return true;
  }
  bool operator != (const CBtyCmd &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CBtyCmd & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CBtyCmd &a, CBtyCmd &b);

inline std::ostream& operator<<(std::ostream& out, const CBtyCmd& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CBtyResTestCmd__isset {
  _CBtyResTestCmd__isset() : gateID(false), bankID(false), cmd(false) {}
  bool gateID :1;
  bool bankID :1;
  bool cmd :1;
} _CBtyResTestCmd__isset;

class CBtyResTestCmd : public virtual ::apache::thrift::TBase {
 public:

  CBtyResTestCmd(const CBtyResTestCmd&);
  CBtyResTestCmd& operator=(const CBtyResTestCmd&);
  CBtyResTestCmd() : gateID(), bankID(), cmd(0) {
  }

  virtual ~CBtyResTestCmd() throw();
  std::string gateID;
  std::string bankID;
  int32_t cmd;

  _CBtyResTestCmd__isset __isset;

  void __set_gateID(const std::string& val);

  void __set_bankID(const std::string& val);

  void __set_cmd(const int32_t val);

  bool operator == (const CBtyResTestCmd & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    if (!(bankID == rhs.bankID))
      return false;
    if (!(cmd == rhs.cmd))
      return false;
    return true;
  }
  bool operator != (const CBtyResTestCmd &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CBtyResTestCmd & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CBtyResTestCmd &a, CBtyResTestCmd &b);

inline std::ostream& operator<<(std::ostream& out, const CBtyResTestCmd& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CBatteryResData__isset {
  _CBatteryResData__isset() : bankID(false), battID(false), time(false), res(false) {}
  bool bankID :1;
  bool battID :1;
  bool time :1;
  bool res :1;
} _CBatteryResData__isset;

class CBatteryResData : public virtual ::apache::thrift::TBase {
 public:

  CBatteryResData(const CBatteryResData&);
  CBatteryResData& operator=(const CBatteryResData&);
  CBatteryResData() : bankID(), battID(), time(0), res(0) {
  }

  virtual ~CBatteryResData() throw();
  std::string bankID;
  std::string battID;
  int64_t time;
  double res;

  _CBatteryResData__isset __isset;

  void __set_bankID(const std::string& val);

  void __set_battID(const std::string& val);

  void __set_time(const int64_t val);

  void __set_res(const double val);

  bool operator == (const CBatteryResData & rhs) const
  {
    if (!(bankID == rhs.bankID))
      return false;
    if (!(battID == rhs.battID))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(res == rhs.res))
      return false;
    return true;
  }
  bool operator != (const CBatteryResData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CBatteryResData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CBatteryResData &a, CBatteryResData &b);

inline std::ostream& operator<<(std::ostream& out, const CBatteryResData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CGeneralData__isset {
  _CGeneralData__isset() : devType(false), devID(false), meters(false), signals(false) {}
  bool devType :1;
  bool devID :1;
  bool meters :1;
  bool signals :1;
} _CGeneralData__isset;

class CGeneralData : public virtual ::apache::thrift::TBase {
 public:

  CGeneralData(const CGeneralData&);
  CGeneralData& operator=(const CGeneralData&);
  CGeneralData() : devType(0), devID() {
  }

  virtual ~CGeneralData() throw();
  int32_t devType;
  std::string devID;
  std::vector<double>  meters;
  std::vector<int32_t>  signals;

  _CGeneralData__isset __isset;

  void __set_devType(const int32_t val);

  void __set_devID(const std::string& val);

  void __set_meters(const std::vector<double> & val);

  void __set_signals(const std::vector<int32_t> & val);

  bool operator == (const CGeneralData & rhs) const
  {
    if (!(devType == rhs.devType))
      return false;
    if (!(devID == rhs.devID))
      return false;
    if (!(meters == rhs.meters))
      return false;
    if (!(signals == rhs.signals))
      return false;
    return true;
  }
  bool operator != (const CGeneralData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CGeneralData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CGeneralData &a, CGeneralData &b);

inline std::ostream& operator<<(std::ostream& out, const CGeneralData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CMeterData__isset {
  _CMeterData__isset() : devType(false), devID(false), ms(false), ss(false) {}
  bool devType :1;
  bool devID :1;
  bool ms :1;
  bool ss :1;
} _CMeterData__isset;

class CMeterData : public virtual ::apache::thrift::TBase {
 public:

  CMeterData(const CMeterData&);
  CMeterData& operator=(const CMeterData&);
  CMeterData() : devType(0), devID() {
  }

  virtual ~CMeterData() throw();
  int32_t devType;
  std::string devID;
  std::map<std::string, double>  ms;
  std::map<std::string, int32_t>  ss;

  _CMeterData__isset __isset;

  void __set_devType(const int32_t val);

  void __set_devID(const std::string& val);

  void __set_ms(const std::map<std::string, double> & val);

  void __set_ss(const std::map<std::string, int32_t> & val);

  bool operator == (const CMeterData & rhs) const
  {
    if (!(devType == rhs.devType))
      return false;
    if (!(devID == rhs.devID))
      return false;
    if (!(ms == rhs.ms))
      return false;
    if (!(ss == rhs.ss))
      return false;
    return true;
  }
  bool operator != (const CMeterData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CMeterData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CMeterData &a, CMeterData &b);

inline std::ostream& operator<<(std::ostream& out, const CMeterData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CConfigData__isset {
  _CConfigData__isset() : devType(false), devID(false), cs(false), cr(false) {}
  bool devType :1;
  bool devID :1;
  bool cs :1;
  bool cr :1;
} _CConfigData__isset;

class CConfigData : public virtual ::apache::thrift::TBase {
 public:

  CConfigData(const CConfigData&);
  CConfigData& operator=(const CConfigData&);
  CConfigData() : devType(0), devID() {
  }

  virtual ~CConfigData() throw();
  int32_t devType;
  std::string devID;
  std::map<std::string, std::string>  cs;
  std::map<std::string, bool>  cr;

  _CConfigData__isset __isset;

  void __set_devType(const int32_t val);

  void __set_devID(const std::string& val);

  void __set_cs(const std::map<std::string, std::string> & val);

  void __set_cr(const std::map<std::string, bool> & val);

  bool operator == (const CConfigData & rhs) const
  {
    if (!(devType == rhs.devType))
      return false;
    if (!(devID == rhs.devID))
      return false;
    if (!(cs == rhs.cs))
      return false;
    if (!(cr == rhs.cr))
      return false;
    return true;
  }
  bool operator != (const CConfigData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CConfigData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CConfigData &a, CConfigData &b);

inline std::ostream& operator<<(std::ostream& out, const CConfigData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CAppInfo__isset {
  _CAppInfo__isset() : appID(false), appVer(false) {}
  bool appID :1;
  bool appVer :1;
} _CAppInfo__isset;

class CAppInfo : public virtual ::apache::thrift::TBase {
 public:

  CAppInfo(const CAppInfo&);
  CAppInfo& operator=(const CAppInfo&);
  CAppInfo() : appID(), appVer() {
  }

  virtual ~CAppInfo() throw();
  std::string appID;
  std::string appVer;

  _CAppInfo__isset __isset;

  void __set_appID(const std::string& val);

  void __set_appVer(const std::string& val);

  bool operator == (const CAppInfo & rhs) const
  {
    if (!(appID == rhs.appID))
      return false;
    if (!(appVer == rhs.appVer))
      return false;
    return true;
  }
  bool operator != (const CAppInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CAppInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CAppInfo &a, CAppInfo &b);

inline std::ostream& operator<<(std::ostream& out, const CAppInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CAppUpdataCmd__isset {
  _CAppUpdataCmd__isset() : type(false), gateID(false), len(false), appID(false), appVer(false), appUrl1(false), appUrl2(false) {}
  bool type :1;
  bool gateID :1;
  bool len :1;
  bool appID :1;
  bool appVer :1;
  bool appUrl1 :1;
  bool appUrl2 :1;
} _CAppUpdataCmd__isset;

class CAppUpdataCmd : public virtual ::apache::thrift::TBase {
 public:

  CAppUpdataCmd(const CAppUpdataCmd&);
  CAppUpdataCmd& operator=(const CAppUpdataCmd&);
  CAppUpdataCmd() : type(0), gateID(), len(0), appID(), appVer(), appUrl1(), appUrl2() {
  }

  virtual ~CAppUpdataCmd() throw();
  int32_t type;
  std::string gateID;
  int32_t len;
  std::string appID;
  std::string appVer;
  std::string appUrl1;
  std::string appUrl2;

  _CAppUpdataCmd__isset __isset;

  void __set_type(const int32_t val);

  void __set_gateID(const std::string& val);

  void __set_len(const int32_t val);

  void __set_appID(const std::string& val);

  void __set_appVer(const std::string& val);

  void __set_appUrl1(const std::string& val);

  void __set_appUrl2(const std::string& val);

  bool operator == (const CAppUpdataCmd & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(gateID == rhs.gateID))
      return false;
    if (!(len == rhs.len))
      return false;
    if (!(appID == rhs.appID))
      return false;
    if (!(appVer == rhs.appVer))
      return false;
    if (!(appUrl1 == rhs.appUrl1))
      return false;
    if (!(appUrl2 == rhs.appUrl2))
      return false;
    return true;
  }
  bool operator != (const CAppUpdataCmd &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CAppUpdataCmd & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CAppUpdataCmd &a, CAppUpdataCmd &b);

inline std::ostream& operator<<(std::ostream& out, const CAppUpdataCmd& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CAppUpdataStatus__isset {
  _CAppUpdataStatus__isset() : type(false), gateID(false), appID(false), appVer(false), status(false) {}
  bool type :1;
  bool gateID :1;
  bool appID :1;
  bool appVer :1;
  bool status :1;
} _CAppUpdataStatus__isset;

class CAppUpdataStatus : public virtual ::apache::thrift::TBase {
 public:

  CAppUpdataStatus(const CAppUpdataStatus&);
  CAppUpdataStatus& operator=(const CAppUpdataStatus&);
  CAppUpdataStatus() : type(0), gateID(), appID(), appVer(), status(0) {
  }

  virtual ~CAppUpdataStatus() throw();
  int32_t type;
  std::string gateID;
  std::string appID;
  std::string appVer;
  int32_t status;

  _CAppUpdataStatus__isset __isset;

  void __set_type(const int32_t val);

  void __set_gateID(const std::string& val);

  void __set_appID(const std::string& val);

  void __set_appVer(const std::string& val);

  void __set_status(const int32_t val);

  bool operator == (const CAppUpdataStatus & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(gateID == rhs.gateID))
      return false;
    if (!(appID == rhs.appID))
      return false;
    if (!(appVer == rhs.appVer))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const CAppUpdataStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CAppUpdataStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CAppUpdataStatus &a, CAppUpdataStatus &b);

inline std::ostream& operator<<(std::ostream& out, const CAppUpdataStatus& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CGateParams__isset {
  _CGateParams__isset() : gateID(false), type(false), num(false), value(false) {}
  bool gateID :1;
  bool type :1;
  bool num :1;
  bool value :1;
} _CGateParams__isset;

class CGateParams : public virtual ::apache::thrift::TBase {
 public:

  CGateParams(const CGateParams&);
  CGateParams& operator=(const CGateParams&);
  CGateParams() : gateID(), type(0), num(0), value(0) {
  }

  virtual ~CGateParams() throw();
  std::string gateID;
  int32_t type;
  int32_t num;
  double value;

  _CGateParams__isset __isset;

  void __set_gateID(const std::string& val);

  void __set_type(const int32_t val);

  void __set_num(const int32_t val);

  void __set_value(const double val);

  bool operator == (const CGateParams & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CGateParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CGateParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CGateParams &a, CGateParams &b);

inline std::ostream& operator<<(std::ostream& out, const CGateParams& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSMS__isset {
  _CSMS__isset() : gateID(false), number(false), content(false), time(false) {}
  bool gateID :1;
  bool number :1;
  bool content :1;
  bool time :1;
} _CSMS__isset;

class CSMS : public virtual ::apache::thrift::TBase {
 public:

  CSMS(const CSMS&);
  CSMS& operator=(const CSMS&);
  CSMS() : gateID(), number(), content(), time(0) {
  }

  virtual ~CSMS() throw();
  std::string gateID;
  std::string number;
  std::string content;
  int64_t time;

  _CSMS__isset __isset;

  void __set_gateID(const std::string& val);

  void __set_number(const std::string& val);

  void __set_content(const std::string& val);

  void __set_time(const int64_t val);

  bool operator == (const CSMS & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    if (!(number == rhs.number))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(time == rhs.time))
      return false;
    return true;
  }
  bool operator != (const CSMS &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSMS & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSMS &a, CSMS &b);

inline std::ostream& operator<<(std::ostream& out, const CSMS& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CQuery__isset {
  _CQuery__isset() : type(false), time(false), gateID(false), text(false) {}
  bool type :1;
  bool time :1;
  bool gateID :1;
  bool text :1;
} _CQuery__isset;

class CQuery : public virtual ::apache::thrift::TBase {
 public:

  CQuery(const CQuery&);
  CQuery& operator=(const CQuery&);
  CQuery() : type(0), time(0), gateID(), text() {
  }

  virtual ~CQuery() throw();
  int32_t type;
  int64_t time;
  std::string gateID;
  std::string text;

  _CQuery__isset __isset;

  void __set_type(const int32_t val);

  void __set_time(const int64_t val);

  void __set_gateID(const std::string& val);

  void __set_text(const std::string& val);

  bool operator == (const CQuery & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(gateID == rhs.gateID))
      return false;
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const CQuery &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CQuery & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CQuery &a, CQuery &b);

inline std::ostream& operator<<(std::ostream& out, const CQuery& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CAlarm__isset {
  _CAlarm__isset() : devType(false), devIndex(false), almType(false), almIndex(false), almFlag(false), almNo(false), almLimit(false), almValue(false), almTime(false), clearLimit(false), clearValue(false), clearTime(false) {}
  bool devType :1;
  bool devIndex :1;
  bool almType :1;
  bool almIndex :1;
  bool almFlag :1;
  bool almNo :1;
  bool almLimit :1;
  bool almValue :1;
  bool almTime :1;
  bool clearLimit :1;
  bool clearValue :1;
  bool clearTime :1;
} _CAlarm__isset;

class CAlarm : public virtual ::apache::thrift::TBase {
 public:

  CAlarm(const CAlarm&);
  CAlarm& operator=(const CAlarm&);
  CAlarm() : devType(0), devIndex(0), almType(0), almIndex(0), almFlag(0), almNo(), almLimit(0), almValue(0), almTime(0), clearLimit(0), clearValue(0), clearTime(0) {
  }

  virtual ~CAlarm() throw();
  int32_t devType;
  int32_t devIndex;
  int32_t almType;
  int32_t almIndex;
  int32_t almFlag;
  std::string almNo;
  double almLimit;
  double almValue;
  int64_t almTime;
  double clearLimit;
  double clearValue;
  int64_t clearTime;

  _CAlarm__isset __isset;

  void __set_devType(const int32_t val);

  void __set_devIndex(const int32_t val);

  void __set_almType(const int32_t val);

  void __set_almIndex(const int32_t val);

  void __set_almFlag(const int32_t val);

  void __set_almNo(const std::string& val);

  void __set_almLimit(const double val);

  void __set_almValue(const double val);

  void __set_almTime(const int64_t val);

  void __set_clearLimit(const double val);

  void __set_clearValue(const double val);

  void __set_clearTime(const int64_t val);

  bool operator == (const CAlarm & rhs) const
  {
    if (!(devType == rhs.devType))
      return false;
    if (!(devIndex == rhs.devIndex))
      return false;
    if (!(almType == rhs.almType))
      return false;
    if (!(almIndex == rhs.almIndex))
      return false;
    if (!(almFlag == rhs.almFlag))
      return false;
    if (!(almNo == rhs.almNo))
      return false;
    if (!(almLimit == rhs.almLimit))
      return false;
    if (!(almValue == rhs.almValue))
      return false;
    if (!(almTime == rhs.almTime))
      return false;
    if (!(clearLimit == rhs.clearLimit))
      return false;
    if (!(clearValue == rhs.clearValue))
      return false;
    if (!(clearTime == rhs.clearTime))
      return false;
    return true;
  }
  bool operator != (const CAlarm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CAlarm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CAlarm &a, CAlarm &b);

inline std::ostream& operator<<(std::ostream& out, const CAlarm& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CAlarmMatch__isset {
  _CAlarmMatch__isset() : almType(false), almIndex(false), almNo(false), almLimit(false), almValue(false), almTime(false) {}
  bool almType :1;
  bool almIndex :1;
  bool almNo :1;
  bool almLimit :1;
  bool almValue :1;
  bool almTime :1;
} _CAlarmMatch__isset;

class CAlarmMatch : public virtual ::apache::thrift::TBase {
 public:

  CAlarmMatch(const CAlarmMatch&);
  CAlarmMatch& operator=(const CAlarmMatch&);
  CAlarmMatch() : almType(0), almIndex(0), almNo(), almLimit(0), almValue(0), almTime(0) {
  }

  virtual ~CAlarmMatch() throw();
  int32_t almType;
  int32_t almIndex;
  std::string almNo;
  double almLimit;
  double almValue;
  int64_t almTime;

  _CAlarmMatch__isset __isset;

  void __set_almType(const int32_t val);

  void __set_almIndex(const int32_t val);

  void __set_almNo(const std::string& val);

  void __set_almLimit(const double val);

  void __set_almValue(const double val);

  void __set_almTime(const int64_t val);

  bool operator == (const CAlarmMatch & rhs) const
  {
    if (!(almType == rhs.almType))
      return false;
    if (!(almIndex == rhs.almIndex))
      return false;
    if (!(almNo == rhs.almNo))
      return false;
    if (!(almLimit == rhs.almLimit))
      return false;
    if (!(almValue == rhs.almValue))
      return false;
    if (!(almTime == rhs.almTime))
      return false;
    return true;
  }
  bool operator != (const CAlarmMatch &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CAlarmMatch & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CAlarmMatch &a, CAlarmMatch &b);

inline std::ostream& operator<<(std::ostream& out, const CAlarmMatch& obj)
{
  obj.printTo(out);
  return out;
}



#endif
