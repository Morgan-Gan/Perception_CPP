/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AccessService_H
#define AccessService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "access_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AccessServiceIf {
 public:
  virtual ~AccessServiceIf() {}
  virtual void test() = 0;
  virtual void online(const std::string& id, const std::string& mac, const std::string& ip) = 0;
  virtual void alive(const std::string& id) = 0;
  virtual void offline(const std::string& id) = 0;
  virtual void gates(const std::string& id, const std::vector<CGate> & gs) = 0;
  virtual bool btyAlms(const std::string& id, const std::vector<CBtyAlarm> & alms, const int32_t zone) = 0;
  virtual void btyAlmMatch(const std::string& id, const std::string& gateID, const std::vector<CBtyAlarm> & alms, const int32_t zone) = 0;
  virtual void queryBattery(std::vector<CBtyCmd> & _return, const std::string& id) = 0;
  virtual void btyRTDataEx(const std::vector<CBatteryBankData> & data, const int32_t zone) = 0;
  virtual bool btyHisDataEx(const std::vector<CBatteryBankData> & data, const int32_t zone) = 0;
  virtual bool btyStatus(const std::vector<CBtyBankStatus> & data, const int32_t zone) = 0;
  virtual void queryResTest(std::vector<CBtyResTestCmd> & _return, const std::string& id) = 0;
  virtual bool btyResTestResult(const std::string& gateID, const std::string& bankID, const int32_t result) = 0;
  virtual bool btyRes(const std::string& gateID, const std::vector<CBatteryResData> & data, const int32_t zone) = 0;
  virtual bool generalData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CGeneralData> & data) = 0;
  virtual bool meterData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CMeterData> & data) = 0;
  virtual bool configData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CConfigData> & data) = 0;
  virtual void configSetResult(const std::string& gateID, const std::vector<CConfigData> & data) = 0;
  virtual void queryAppUpdata(std::vector<CAppUpdataCmd> & _return, const std::string& id) = 0;
  virtual bool appUpdataStatus(const std::string& gateID, const std::vector<CAppUpdataStatus> & data) = 0;
  virtual bool appInfo(const std::string& gateID, const std::vector<CAppInfo> & data) = 0;
  virtual void queryGateParams(std::vector<CGateParams> & _return, const std::string& id) = 0;
  virtual bool gateParams(const std::string& gateID, const std::vector<CGateParams> & data) = 0;
  virtual void querySetGateParams(std::vector<CGateParams> & _return, const std::string& id) = 0;
  virtual bool setGateParams(const std::string& gateID, const std::vector<CGateParams> & data) = 0;
  virtual void querySendSMS(std::vector<CSMS> & _return, const std::string& id) = 0;
  virtual bool getSMS(const std::vector<CSMS> & data) = 0;
  virtual void sendLog(const std::string& id, const std::string& ip, const int32_t lv, const int64_t time, const std::string& log) = 0;
  virtual void query(std::vector<CQuery> & _return, const std::string& id) = 0;
  virtual void reply(const std::string& id, const int32_t type, const std::string& gateID, const int64_t time, const std::string& text) = 0;
  virtual bool alarm(const std::string& gateID, const std::vector<CAlarm> & alms) = 0;
  virtual bool alarmMatch(const std::string& gateID, const int32_t devType, const int32_t devIndex, const std::vector<CAlarmMatch> & alms) = 0;
};

class AccessServiceIfFactory {
 public:
  typedef AccessServiceIf Handler;

  virtual ~AccessServiceIfFactory() {}

  virtual AccessServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AccessServiceIf* /* handler */) = 0;
};

class AccessServiceIfSingletonFactory : virtual public AccessServiceIfFactory {
 public:
  AccessServiceIfSingletonFactory(const boost::shared_ptr<AccessServiceIf>& iface) : iface_(iface) {}
  virtual ~AccessServiceIfSingletonFactory() {}

  virtual AccessServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AccessServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AccessServiceIf> iface_;
};

class AccessServiceNull : virtual public AccessServiceIf {
 public:
  virtual ~AccessServiceNull() {}
  void test() {
    return;
  }
  void online(const std::string& /* id */, const std::string& /* mac */, const std::string& /* ip */) {
    return;
  }
  void alive(const std::string& /* id */) {
    return;
  }
  void offline(const std::string& /* id */) {
    return;
  }
  void gates(const std::string& /* id */, const std::vector<CGate> & /* gs */) {
    return;
  }
  bool btyAlms(const std::string& /* id */, const std::vector<CBtyAlarm> & /* alms */, const int32_t /* zone */) {
    bool _return = false;
    return _return;
  }
  void btyAlmMatch(const std::string& /* id */, const std::string& /* gateID */, const std::vector<CBtyAlarm> & /* alms */, const int32_t /* zone */) {
    return;
  }
  void queryBattery(std::vector<CBtyCmd> & /* _return */, const std::string& /* id */) {
    return;
  }
  void btyRTDataEx(const std::vector<CBatteryBankData> & /* data */, const int32_t /* zone */) {
    return;
  }
  bool btyHisDataEx(const std::vector<CBatteryBankData> & /* data */, const int32_t /* zone */) {
    bool _return = false;
    return _return;
  }
  bool btyStatus(const std::vector<CBtyBankStatus> & /* data */, const int32_t /* zone */) {
    bool _return = false;
    return _return;
  }
  void queryResTest(std::vector<CBtyResTestCmd> & /* _return */, const std::string& /* id */) {
    return;
  }
  bool btyResTestResult(const std::string& /* gateID */, const std::string& /* bankID */, const int32_t /* result */) {
    bool _return = false;
    return _return;
  }
  bool btyRes(const std::string& /* gateID */, const std::vector<CBatteryResData> & /* data */, const int32_t /* zone */) {
    bool _return = false;
    return _return;
  }
  bool generalData(const std::string& /* gateID */, const int32_t /* zone */, const int64_t /* time */, const std::vector<CGeneralData> & /* data */) {
    bool _return = false;
    return _return;
  }
  bool meterData(const std::string& /* gateID */, const int32_t /* zone */, const int64_t /* time */, const std::vector<CMeterData> & /* data */) {
    bool _return = false;
    return _return;
  }
  bool configData(const std::string& /* gateID */, const int32_t /* zone */, const int64_t /* time */, const std::vector<CConfigData> & /* data */) {
    bool _return = false;
    return _return;
  }
  void configSetResult(const std::string& /* gateID */, const std::vector<CConfigData> & /* data */) {
    return;
  }
  void queryAppUpdata(std::vector<CAppUpdataCmd> & /* _return */, const std::string& /* id */) {
    return;
  }
  bool appUpdataStatus(const std::string& /* gateID */, const std::vector<CAppUpdataStatus> & /* data */) {
    bool _return = false;
    return _return;
  }
  bool appInfo(const std::string& /* gateID */, const std::vector<CAppInfo> & /* data */) {
    bool _return = false;
    return _return;
  }
  void queryGateParams(std::vector<CGateParams> & /* _return */, const std::string& /* id */) {
    return;
  }
  bool gateParams(const std::string& /* gateID */, const std::vector<CGateParams> & /* data */) {
    bool _return = false;
    return _return;
  }
  void querySetGateParams(std::vector<CGateParams> & /* _return */, const std::string& /* id */) {
    return;
  }
  bool setGateParams(const std::string& /* gateID */, const std::vector<CGateParams> & /* data */) {
    bool _return = false;
    return _return;
  }
  void querySendSMS(std::vector<CSMS> & /* _return */, const std::string& /* id */) {
    return;
  }
  bool getSMS(const std::vector<CSMS> & /* data */) {
    bool _return = false;
    return _return;
  }
  void sendLog(const std::string& /* id */, const std::string& /* ip */, const int32_t /* lv */, const int64_t /* time */, const std::string& /* log */) {
    return;
  }
  void query(std::vector<CQuery> & /* _return */, const std::string& /* id */) {
    return;
  }
  void reply(const std::string& /* id */, const int32_t /* type */, const std::string& /* gateID */, const int64_t /* time */, const std::string& /* text */) {
    return;
  }
  bool alarm(const std::string& /* gateID */, const std::vector<CAlarm> & /* alms */) {
    bool _return = false;
    return _return;
  }
  bool alarmMatch(const std::string& /* gateID */, const int32_t /* devType */, const int32_t /* devIndex */, const std::vector<CAlarmMatch> & /* alms */) {
    bool _return = false;
    return _return;
  }
};


class AccessService_test_args {
 public:

  AccessService_test_args(const AccessService_test_args&);
  AccessService_test_args& operator=(const AccessService_test_args&);
  AccessService_test_args() {
  }

  virtual ~AccessService_test_args() throw();

  bool operator == (const AccessService_test_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessService_test_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_test_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_test_pargs {
 public:


  virtual ~AccessService_test_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_test_result {
 public:

  AccessService_test_result(const AccessService_test_result&);
  AccessService_test_result& operator=(const AccessService_test_result&);
  AccessService_test_result() {
  }

  virtual ~AccessService_test_result() throw();

  bool operator == (const AccessService_test_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessService_test_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_test_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_test_presult {
 public:


  virtual ~AccessService_test_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_online_args__isset {
  _AccessService_online_args__isset() : id(false), mac(false), ip(false) {}
  bool id :1;
  bool mac :1;
  bool ip :1;
} _AccessService_online_args__isset;

class AccessService_online_args {
 public:

  AccessService_online_args(const AccessService_online_args&);
  AccessService_online_args& operator=(const AccessService_online_args&);
  AccessService_online_args() : id(), mac(), ip() {
  }

  virtual ~AccessService_online_args() throw();
  std::string id;
  std::string mac;
  std::string ip;

  _AccessService_online_args__isset __isset;

  void __set_id(const std::string& val);

  void __set_mac(const std::string& val);

  void __set_ip(const std::string& val);

  bool operator == (const AccessService_online_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const AccessService_online_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_online_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_online_pargs {
 public:


  virtual ~AccessService_online_pargs() throw();
  const std::string* id;
  const std::string* mac;
  const std::string* ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_online_result {
 public:

  AccessService_online_result(const AccessService_online_result&);
  AccessService_online_result& operator=(const AccessService_online_result&);
  AccessService_online_result() {
  }

  virtual ~AccessService_online_result() throw();

  bool operator == (const AccessService_online_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessService_online_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_online_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_online_presult {
 public:


  virtual ~AccessService_online_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_alive_args__isset {
  _AccessService_alive_args__isset() : id(false) {}
  bool id :1;
} _AccessService_alive_args__isset;

class AccessService_alive_args {
 public:

  AccessService_alive_args(const AccessService_alive_args&);
  AccessService_alive_args& operator=(const AccessService_alive_args&);
  AccessService_alive_args() : id() {
  }

  virtual ~AccessService_alive_args() throw();
  std::string id;

  _AccessService_alive_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const AccessService_alive_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AccessService_alive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_alive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_alive_pargs {
 public:


  virtual ~AccessService_alive_pargs() throw();
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_alive_result {
 public:

  AccessService_alive_result(const AccessService_alive_result&);
  AccessService_alive_result& operator=(const AccessService_alive_result&);
  AccessService_alive_result() {
  }

  virtual ~AccessService_alive_result() throw();

  bool operator == (const AccessService_alive_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessService_alive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_alive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_alive_presult {
 public:


  virtual ~AccessService_alive_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_offline_args__isset {
  _AccessService_offline_args__isset() : id(false) {}
  bool id :1;
} _AccessService_offline_args__isset;

class AccessService_offline_args {
 public:

  AccessService_offline_args(const AccessService_offline_args&);
  AccessService_offline_args& operator=(const AccessService_offline_args&);
  AccessService_offline_args() : id() {
  }

  virtual ~AccessService_offline_args() throw();
  std::string id;

  _AccessService_offline_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const AccessService_offline_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AccessService_offline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_offline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_offline_pargs {
 public:


  virtual ~AccessService_offline_pargs() throw();
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_offline_result {
 public:

  AccessService_offline_result(const AccessService_offline_result&);
  AccessService_offline_result& operator=(const AccessService_offline_result&);
  AccessService_offline_result() {
  }

  virtual ~AccessService_offline_result() throw();

  bool operator == (const AccessService_offline_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessService_offline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_offline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_offline_presult {
 public:


  virtual ~AccessService_offline_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_gates_args__isset {
  _AccessService_gates_args__isset() : id(false), gs(false) {}
  bool id :1;
  bool gs :1;
} _AccessService_gates_args__isset;

class AccessService_gates_args {
 public:

  AccessService_gates_args(const AccessService_gates_args&);
  AccessService_gates_args& operator=(const AccessService_gates_args&);
  AccessService_gates_args() : id() {
  }

  virtual ~AccessService_gates_args() throw();
  std::string id;
  std::vector<CGate>  gs;

  _AccessService_gates_args__isset __isset;

  void __set_id(const std::string& val);

  void __set_gs(const std::vector<CGate> & val);

  bool operator == (const AccessService_gates_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(gs == rhs.gs))
      return false;
    return true;
  }
  bool operator != (const AccessService_gates_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_gates_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_gates_pargs {
 public:


  virtual ~AccessService_gates_pargs() throw();
  const std::string* id;
  const std::vector<CGate> * gs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_gates_result {
 public:

  AccessService_gates_result(const AccessService_gates_result&);
  AccessService_gates_result& operator=(const AccessService_gates_result&);
  AccessService_gates_result() {
  }

  virtual ~AccessService_gates_result() throw();

  bool operator == (const AccessService_gates_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessService_gates_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_gates_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_gates_presult {
 public:


  virtual ~AccessService_gates_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_btyAlms_args__isset {
  _AccessService_btyAlms_args__isset() : id(false), alms(false), zone(false) {}
  bool id :1;
  bool alms :1;
  bool zone :1;
} _AccessService_btyAlms_args__isset;

class AccessService_btyAlms_args {
 public:

  AccessService_btyAlms_args(const AccessService_btyAlms_args&);
  AccessService_btyAlms_args& operator=(const AccessService_btyAlms_args&);
  AccessService_btyAlms_args() : id(), zone(0) {
  }

  virtual ~AccessService_btyAlms_args() throw();
  std::string id;
  std::vector<CBtyAlarm>  alms;
  int32_t zone;

  _AccessService_btyAlms_args__isset __isset;

  void __set_id(const std::string& val);

  void __set_alms(const std::vector<CBtyAlarm> & val);

  void __set_zone(const int32_t val);

  bool operator == (const AccessService_btyAlms_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(alms == rhs.alms))
      return false;
    if (!(zone == rhs.zone))
      return false;
    return true;
  }
  bool operator != (const AccessService_btyAlms_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_btyAlms_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_btyAlms_pargs {
 public:


  virtual ~AccessService_btyAlms_pargs() throw();
  const std::string* id;
  const std::vector<CBtyAlarm> * alms;
  const int32_t* zone;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_btyAlms_result__isset {
  _AccessService_btyAlms_result__isset() : success(false) {}
  bool success :1;
} _AccessService_btyAlms_result__isset;

class AccessService_btyAlms_result {
 public:

  AccessService_btyAlms_result(const AccessService_btyAlms_result&);
  AccessService_btyAlms_result& operator=(const AccessService_btyAlms_result&);
  AccessService_btyAlms_result() : success(0) {
  }

  virtual ~AccessService_btyAlms_result() throw();
  bool success;

  _AccessService_btyAlms_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AccessService_btyAlms_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_btyAlms_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_btyAlms_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_btyAlms_presult__isset {
  _AccessService_btyAlms_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_btyAlms_presult__isset;

class AccessService_btyAlms_presult {
 public:


  virtual ~AccessService_btyAlms_presult() throw();
  bool* success;

  _AccessService_btyAlms_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_btyAlmMatch_args__isset {
  _AccessService_btyAlmMatch_args__isset() : id(false), gateID(false), alms(false), zone(false) {}
  bool id :1;
  bool gateID :1;
  bool alms :1;
  bool zone :1;
} _AccessService_btyAlmMatch_args__isset;

class AccessService_btyAlmMatch_args {
 public:

  AccessService_btyAlmMatch_args(const AccessService_btyAlmMatch_args&);
  AccessService_btyAlmMatch_args& operator=(const AccessService_btyAlmMatch_args&);
  AccessService_btyAlmMatch_args() : id(), gateID(), zone(0) {
  }

  virtual ~AccessService_btyAlmMatch_args() throw();
  std::string id;
  std::string gateID;
  std::vector<CBtyAlarm>  alms;
  int32_t zone;

  _AccessService_btyAlmMatch_args__isset __isset;

  void __set_id(const std::string& val);

  void __set_gateID(const std::string& val);

  void __set_alms(const std::vector<CBtyAlarm> & val);

  void __set_zone(const int32_t val);

  bool operator == (const AccessService_btyAlmMatch_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(gateID == rhs.gateID))
      return false;
    if (!(alms == rhs.alms))
      return false;
    if (!(zone == rhs.zone))
      return false;
    return true;
  }
  bool operator != (const AccessService_btyAlmMatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_btyAlmMatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_btyAlmMatch_pargs {
 public:


  virtual ~AccessService_btyAlmMatch_pargs() throw();
  const std::string* id;
  const std::string* gateID;
  const std::vector<CBtyAlarm> * alms;
  const int32_t* zone;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_btyAlmMatch_result {
 public:

  AccessService_btyAlmMatch_result(const AccessService_btyAlmMatch_result&);
  AccessService_btyAlmMatch_result& operator=(const AccessService_btyAlmMatch_result&);
  AccessService_btyAlmMatch_result() {
  }

  virtual ~AccessService_btyAlmMatch_result() throw();

  bool operator == (const AccessService_btyAlmMatch_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessService_btyAlmMatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_btyAlmMatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_btyAlmMatch_presult {
 public:


  virtual ~AccessService_btyAlmMatch_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_queryBattery_args__isset {
  _AccessService_queryBattery_args__isset() : id(false) {}
  bool id :1;
} _AccessService_queryBattery_args__isset;

class AccessService_queryBattery_args {
 public:

  AccessService_queryBattery_args(const AccessService_queryBattery_args&);
  AccessService_queryBattery_args& operator=(const AccessService_queryBattery_args&);
  AccessService_queryBattery_args() : id() {
  }

  virtual ~AccessService_queryBattery_args() throw();
  std::string id;

  _AccessService_queryBattery_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const AccessService_queryBattery_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AccessService_queryBattery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_queryBattery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_queryBattery_pargs {
 public:


  virtual ~AccessService_queryBattery_pargs() throw();
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_queryBattery_result__isset {
  _AccessService_queryBattery_result__isset() : success(false) {}
  bool success :1;
} _AccessService_queryBattery_result__isset;

class AccessService_queryBattery_result {
 public:

  AccessService_queryBattery_result(const AccessService_queryBattery_result&);
  AccessService_queryBattery_result& operator=(const AccessService_queryBattery_result&);
  AccessService_queryBattery_result() {
  }

  virtual ~AccessService_queryBattery_result() throw();
  std::vector<CBtyCmd>  success;

  _AccessService_queryBattery_result__isset __isset;

  void __set_success(const std::vector<CBtyCmd> & val);

  bool operator == (const AccessService_queryBattery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_queryBattery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_queryBattery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_queryBattery_presult__isset {
  _AccessService_queryBattery_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_queryBattery_presult__isset;

class AccessService_queryBattery_presult {
 public:


  virtual ~AccessService_queryBattery_presult() throw();
  std::vector<CBtyCmd> * success;

  _AccessService_queryBattery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_btyRTDataEx_args__isset {
  _AccessService_btyRTDataEx_args__isset() : data(false), zone(false) {}
  bool data :1;
  bool zone :1;
} _AccessService_btyRTDataEx_args__isset;

class AccessService_btyRTDataEx_args {
 public:

  AccessService_btyRTDataEx_args(const AccessService_btyRTDataEx_args&);
  AccessService_btyRTDataEx_args& operator=(const AccessService_btyRTDataEx_args&);
  AccessService_btyRTDataEx_args() : zone(0) {
  }

  virtual ~AccessService_btyRTDataEx_args() throw();
  std::vector<CBatteryBankData>  data;
  int32_t zone;

  _AccessService_btyRTDataEx_args__isset __isset;

  void __set_data(const std::vector<CBatteryBankData> & val);

  void __set_zone(const int32_t val);

  bool operator == (const AccessService_btyRTDataEx_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(zone == rhs.zone))
      return false;
    return true;
  }
  bool operator != (const AccessService_btyRTDataEx_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_btyRTDataEx_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_btyRTDataEx_pargs {
 public:


  virtual ~AccessService_btyRTDataEx_pargs() throw();
  const std::vector<CBatteryBankData> * data;
  const int32_t* zone;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_btyRTDataEx_result {
 public:

  AccessService_btyRTDataEx_result(const AccessService_btyRTDataEx_result&);
  AccessService_btyRTDataEx_result& operator=(const AccessService_btyRTDataEx_result&);
  AccessService_btyRTDataEx_result() {
  }

  virtual ~AccessService_btyRTDataEx_result() throw();

  bool operator == (const AccessService_btyRTDataEx_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessService_btyRTDataEx_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_btyRTDataEx_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_btyRTDataEx_presult {
 public:


  virtual ~AccessService_btyRTDataEx_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_btyHisDataEx_args__isset {
  _AccessService_btyHisDataEx_args__isset() : data(false), zone(false) {}
  bool data :1;
  bool zone :1;
} _AccessService_btyHisDataEx_args__isset;

class AccessService_btyHisDataEx_args {
 public:

  AccessService_btyHisDataEx_args(const AccessService_btyHisDataEx_args&);
  AccessService_btyHisDataEx_args& operator=(const AccessService_btyHisDataEx_args&);
  AccessService_btyHisDataEx_args() : zone(0) {
  }

  virtual ~AccessService_btyHisDataEx_args() throw();
  std::vector<CBatteryBankData>  data;
  int32_t zone;

  _AccessService_btyHisDataEx_args__isset __isset;

  void __set_data(const std::vector<CBatteryBankData> & val);

  void __set_zone(const int32_t val);

  bool operator == (const AccessService_btyHisDataEx_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(zone == rhs.zone))
      return false;
    return true;
  }
  bool operator != (const AccessService_btyHisDataEx_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_btyHisDataEx_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_btyHisDataEx_pargs {
 public:


  virtual ~AccessService_btyHisDataEx_pargs() throw();
  const std::vector<CBatteryBankData> * data;
  const int32_t* zone;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_btyHisDataEx_result__isset {
  _AccessService_btyHisDataEx_result__isset() : success(false) {}
  bool success :1;
} _AccessService_btyHisDataEx_result__isset;

class AccessService_btyHisDataEx_result {
 public:

  AccessService_btyHisDataEx_result(const AccessService_btyHisDataEx_result&);
  AccessService_btyHisDataEx_result& operator=(const AccessService_btyHisDataEx_result&);
  AccessService_btyHisDataEx_result() : success(0) {
  }

  virtual ~AccessService_btyHisDataEx_result() throw();
  bool success;

  _AccessService_btyHisDataEx_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AccessService_btyHisDataEx_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_btyHisDataEx_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_btyHisDataEx_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_btyHisDataEx_presult__isset {
  _AccessService_btyHisDataEx_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_btyHisDataEx_presult__isset;

class AccessService_btyHisDataEx_presult {
 public:


  virtual ~AccessService_btyHisDataEx_presult() throw();
  bool* success;

  _AccessService_btyHisDataEx_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_btyStatus_args__isset {
  _AccessService_btyStatus_args__isset() : data(false), zone(false) {}
  bool data :1;
  bool zone :1;
} _AccessService_btyStatus_args__isset;

class AccessService_btyStatus_args {
 public:

  AccessService_btyStatus_args(const AccessService_btyStatus_args&);
  AccessService_btyStatus_args& operator=(const AccessService_btyStatus_args&);
  AccessService_btyStatus_args() : zone(0) {
  }

  virtual ~AccessService_btyStatus_args() throw();
  std::vector<CBtyBankStatus>  data;
  int32_t zone;

  _AccessService_btyStatus_args__isset __isset;

  void __set_data(const std::vector<CBtyBankStatus> & val);

  void __set_zone(const int32_t val);

  bool operator == (const AccessService_btyStatus_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(zone == rhs.zone))
      return false;
    return true;
  }
  bool operator != (const AccessService_btyStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_btyStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_btyStatus_pargs {
 public:


  virtual ~AccessService_btyStatus_pargs() throw();
  const std::vector<CBtyBankStatus> * data;
  const int32_t* zone;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_btyStatus_result__isset {
  _AccessService_btyStatus_result__isset() : success(false) {}
  bool success :1;
} _AccessService_btyStatus_result__isset;

class AccessService_btyStatus_result {
 public:

  AccessService_btyStatus_result(const AccessService_btyStatus_result&);
  AccessService_btyStatus_result& operator=(const AccessService_btyStatus_result&);
  AccessService_btyStatus_result() : success(0) {
  }

  virtual ~AccessService_btyStatus_result() throw();
  bool success;

  _AccessService_btyStatus_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AccessService_btyStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_btyStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_btyStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_btyStatus_presult__isset {
  _AccessService_btyStatus_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_btyStatus_presult__isset;

class AccessService_btyStatus_presult {
 public:


  virtual ~AccessService_btyStatus_presult() throw();
  bool* success;

  _AccessService_btyStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_queryResTest_args__isset {
  _AccessService_queryResTest_args__isset() : id(false) {}
  bool id :1;
} _AccessService_queryResTest_args__isset;

class AccessService_queryResTest_args {
 public:

  AccessService_queryResTest_args(const AccessService_queryResTest_args&);
  AccessService_queryResTest_args& operator=(const AccessService_queryResTest_args&);
  AccessService_queryResTest_args() : id() {
  }

  virtual ~AccessService_queryResTest_args() throw();
  std::string id;

  _AccessService_queryResTest_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const AccessService_queryResTest_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AccessService_queryResTest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_queryResTest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_queryResTest_pargs {
 public:


  virtual ~AccessService_queryResTest_pargs() throw();
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_queryResTest_result__isset {
  _AccessService_queryResTest_result__isset() : success(false) {}
  bool success :1;
} _AccessService_queryResTest_result__isset;

class AccessService_queryResTest_result {
 public:

  AccessService_queryResTest_result(const AccessService_queryResTest_result&);
  AccessService_queryResTest_result& operator=(const AccessService_queryResTest_result&);
  AccessService_queryResTest_result() {
  }

  virtual ~AccessService_queryResTest_result() throw();
  std::vector<CBtyResTestCmd>  success;

  _AccessService_queryResTest_result__isset __isset;

  void __set_success(const std::vector<CBtyResTestCmd> & val);

  bool operator == (const AccessService_queryResTest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_queryResTest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_queryResTest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_queryResTest_presult__isset {
  _AccessService_queryResTest_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_queryResTest_presult__isset;

class AccessService_queryResTest_presult {
 public:


  virtual ~AccessService_queryResTest_presult() throw();
  std::vector<CBtyResTestCmd> * success;

  _AccessService_queryResTest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_btyResTestResult_args__isset {
  _AccessService_btyResTestResult_args__isset() : gateID(false), bankID(false), result(false) {}
  bool gateID :1;
  bool bankID :1;
  bool result :1;
} _AccessService_btyResTestResult_args__isset;

class AccessService_btyResTestResult_args {
 public:

  AccessService_btyResTestResult_args(const AccessService_btyResTestResult_args&);
  AccessService_btyResTestResult_args& operator=(const AccessService_btyResTestResult_args&);
  AccessService_btyResTestResult_args() : gateID(), bankID(), result(0) {
  }

  virtual ~AccessService_btyResTestResult_args() throw();
  std::string gateID;
  std::string bankID;
  int32_t result;

  _AccessService_btyResTestResult_args__isset __isset;

  void __set_gateID(const std::string& val);

  void __set_bankID(const std::string& val);

  void __set_result(const int32_t val);

  bool operator == (const AccessService_btyResTestResult_args & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    if (!(bankID == rhs.bankID))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const AccessService_btyResTestResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_btyResTestResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_btyResTestResult_pargs {
 public:


  virtual ~AccessService_btyResTestResult_pargs() throw();
  const std::string* gateID;
  const std::string* bankID;
  const int32_t* result;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_btyResTestResult_result__isset {
  _AccessService_btyResTestResult_result__isset() : success(false) {}
  bool success :1;
} _AccessService_btyResTestResult_result__isset;

class AccessService_btyResTestResult_result {
 public:

  AccessService_btyResTestResult_result(const AccessService_btyResTestResult_result&);
  AccessService_btyResTestResult_result& operator=(const AccessService_btyResTestResult_result&);
  AccessService_btyResTestResult_result() : success(0) {
  }

  virtual ~AccessService_btyResTestResult_result() throw();
  bool success;

  _AccessService_btyResTestResult_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AccessService_btyResTestResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_btyResTestResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_btyResTestResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_btyResTestResult_presult__isset {
  _AccessService_btyResTestResult_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_btyResTestResult_presult__isset;

class AccessService_btyResTestResult_presult {
 public:


  virtual ~AccessService_btyResTestResult_presult() throw();
  bool* success;

  _AccessService_btyResTestResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_btyRes_args__isset {
  _AccessService_btyRes_args__isset() : gateID(false), data(false), zone(false) {}
  bool gateID :1;
  bool data :1;
  bool zone :1;
} _AccessService_btyRes_args__isset;

class AccessService_btyRes_args {
 public:

  AccessService_btyRes_args(const AccessService_btyRes_args&);
  AccessService_btyRes_args& operator=(const AccessService_btyRes_args&);
  AccessService_btyRes_args() : gateID(), zone(0) {
  }

  virtual ~AccessService_btyRes_args() throw();
  std::string gateID;
  std::vector<CBatteryResData>  data;
  int32_t zone;

  _AccessService_btyRes_args__isset __isset;

  void __set_gateID(const std::string& val);

  void __set_data(const std::vector<CBatteryResData> & val);

  void __set_zone(const int32_t val);

  bool operator == (const AccessService_btyRes_args & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(zone == rhs.zone))
      return false;
    return true;
  }
  bool operator != (const AccessService_btyRes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_btyRes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_btyRes_pargs {
 public:


  virtual ~AccessService_btyRes_pargs() throw();
  const std::string* gateID;
  const std::vector<CBatteryResData> * data;
  const int32_t* zone;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_btyRes_result__isset {
  _AccessService_btyRes_result__isset() : success(false) {}
  bool success :1;
} _AccessService_btyRes_result__isset;

class AccessService_btyRes_result {
 public:

  AccessService_btyRes_result(const AccessService_btyRes_result&);
  AccessService_btyRes_result& operator=(const AccessService_btyRes_result&);
  AccessService_btyRes_result() : success(0) {
  }

  virtual ~AccessService_btyRes_result() throw();
  bool success;

  _AccessService_btyRes_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AccessService_btyRes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_btyRes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_btyRes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_btyRes_presult__isset {
  _AccessService_btyRes_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_btyRes_presult__isset;

class AccessService_btyRes_presult {
 public:


  virtual ~AccessService_btyRes_presult() throw();
  bool* success;

  _AccessService_btyRes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_generalData_args__isset {
  _AccessService_generalData_args__isset() : gateID(false), zone(false), time(false), data(false) {}
  bool gateID :1;
  bool zone :1;
  bool time :1;
  bool data :1;
} _AccessService_generalData_args__isset;

class AccessService_generalData_args {
 public:

  AccessService_generalData_args(const AccessService_generalData_args&);
  AccessService_generalData_args& operator=(const AccessService_generalData_args&);
  AccessService_generalData_args() : gateID(), zone(0), time(0) {
  }

  virtual ~AccessService_generalData_args() throw();
  std::string gateID;
  int32_t zone;
  int64_t time;
  std::vector<CGeneralData>  data;

  _AccessService_generalData_args__isset __isset;

  void __set_gateID(const std::string& val);

  void __set_zone(const int32_t val);

  void __set_time(const int64_t val);

  void __set_data(const std::vector<CGeneralData> & val);

  bool operator == (const AccessService_generalData_args & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    if (!(zone == rhs.zone))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const AccessService_generalData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_generalData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_generalData_pargs {
 public:


  virtual ~AccessService_generalData_pargs() throw();
  const std::string* gateID;
  const int32_t* zone;
  const int64_t* time;
  const std::vector<CGeneralData> * data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_generalData_result__isset {
  _AccessService_generalData_result__isset() : success(false) {}
  bool success :1;
} _AccessService_generalData_result__isset;

class AccessService_generalData_result {
 public:

  AccessService_generalData_result(const AccessService_generalData_result&);
  AccessService_generalData_result& operator=(const AccessService_generalData_result&);
  AccessService_generalData_result() : success(0) {
  }

  virtual ~AccessService_generalData_result() throw();
  bool success;

  _AccessService_generalData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AccessService_generalData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_generalData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_generalData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_generalData_presult__isset {
  _AccessService_generalData_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_generalData_presult__isset;

class AccessService_generalData_presult {
 public:


  virtual ~AccessService_generalData_presult() throw();
  bool* success;

  _AccessService_generalData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_meterData_args__isset {
  _AccessService_meterData_args__isset() : gateID(false), zone(false), time(false), data(false) {}
  bool gateID :1;
  bool zone :1;
  bool time :1;
  bool data :1;
} _AccessService_meterData_args__isset;

class AccessService_meterData_args {
 public:

  AccessService_meterData_args(const AccessService_meterData_args&);
  AccessService_meterData_args& operator=(const AccessService_meterData_args&);
  AccessService_meterData_args() : gateID(), zone(0), time(0) {
  }

  virtual ~AccessService_meterData_args() throw();
  std::string gateID;
  int32_t zone;
  int64_t time;
  std::vector<CMeterData>  data;

  _AccessService_meterData_args__isset __isset;

  void __set_gateID(const std::string& val);

  void __set_zone(const int32_t val);

  void __set_time(const int64_t val);

  void __set_data(const std::vector<CMeterData> & val);

  bool operator == (const AccessService_meterData_args & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    if (!(zone == rhs.zone))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const AccessService_meterData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_meterData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_meterData_pargs {
 public:


  virtual ~AccessService_meterData_pargs() throw();
  const std::string* gateID;
  const int32_t* zone;
  const int64_t* time;
  const std::vector<CMeterData> * data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_meterData_result__isset {
  _AccessService_meterData_result__isset() : success(false) {}
  bool success :1;
} _AccessService_meterData_result__isset;

class AccessService_meterData_result {
 public:

  AccessService_meterData_result(const AccessService_meterData_result&);
  AccessService_meterData_result& operator=(const AccessService_meterData_result&);
  AccessService_meterData_result() : success(0) {
  }

  virtual ~AccessService_meterData_result() throw();
  bool success;

  _AccessService_meterData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AccessService_meterData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_meterData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_meterData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_meterData_presult__isset {
  _AccessService_meterData_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_meterData_presult__isset;

class AccessService_meterData_presult {
 public:


  virtual ~AccessService_meterData_presult() throw();
  bool* success;

  _AccessService_meterData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_configData_args__isset {
  _AccessService_configData_args__isset() : gateID(false), zone(false), time(false), data(false) {}
  bool gateID :1;
  bool zone :1;
  bool time :1;
  bool data :1;
} _AccessService_configData_args__isset;

class AccessService_configData_args {
 public:

  AccessService_configData_args(const AccessService_configData_args&);
  AccessService_configData_args& operator=(const AccessService_configData_args&);
  AccessService_configData_args() : gateID(), zone(0), time(0) {
  }

  virtual ~AccessService_configData_args() throw();
  std::string gateID;
  int32_t zone;
  int64_t time;
  std::vector<CConfigData>  data;

  _AccessService_configData_args__isset __isset;

  void __set_gateID(const std::string& val);

  void __set_zone(const int32_t val);

  void __set_time(const int64_t val);

  void __set_data(const std::vector<CConfigData> & val);

  bool operator == (const AccessService_configData_args & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    if (!(zone == rhs.zone))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const AccessService_configData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_configData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_configData_pargs {
 public:


  virtual ~AccessService_configData_pargs() throw();
  const std::string* gateID;
  const int32_t* zone;
  const int64_t* time;
  const std::vector<CConfigData> * data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_configData_result__isset {
  _AccessService_configData_result__isset() : success(false) {}
  bool success :1;
} _AccessService_configData_result__isset;

class AccessService_configData_result {
 public:

  AccessService_configData_result(const AccessService_configData_result&);
  AccessService_configData_result& operator=(const AccessService_configData_result&);
  AccessService_configData_result() : success(0) {
  }

  virtual ~AccessService_configData_result() throw();
  bool success;

  _AccessService_configData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AccessService_configData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_configData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_configData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_configData_presult__isset {
  _AccessService_configData_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_configData_presult__isset;

class AccessService_configData_presult {
 public:


  virtual ~AccessService_configData_presult() throw();
  bool* success;

  _AccessService_configData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_configSetResult_args__isset {
  _AccessService_configSetResult_args__isset() : gateID(false), data(false) {}
  bool gateID :1;
  bool data :1;
} _AccessService_configSetResult_args__isset;

class AccessService_configSetResult_args {
 public:

  AccessService_configSetResult_args(const AccessService_configSetResult_args&);
  AccessService_configSetResult_args& operator=(const AccessService_configSetResult_args&);
  AccessService_configSetResult_args() : gateID() {
  }

  virtual ~AccessService_configSetResult_args() throw();
  std::string gateID;
  std::vector<CConfigData>  data;

  _AccessService_configSetResult_args__isset __isset;

  void __set_gateID(const std::string& val);

  void __set_data(const std::vector<CConfigData> & val);

  bool operator == (const AccessService_configSetResult_args & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const AccessService_configSetResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_configSetResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_configSetResult_pargs {
 public:


  virtual ~AccessService_configSetResult_pargs() throw();
  const std::string* gateID;
  const std::vector<CConfigData> * data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_configSetResult_result {
 public:

  AccessService_configSetResult_result(const AccessService_configSetResult_result&);
  AccessService_configSetResult_result& operator=(const AccessService_configSetResult_result&);
  AccessService_configSetResult_result() {
  }

  virtual ~AccessService_configSetResult_result() throw();

  bool operator == (const AccessService_configSetResult_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessService_configSetResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_configSetResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_configSetResult_presult {
 public:


  virtual ~AccessService_configSetResult_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_queryAppUpdata_args__isset {
  _AccessService_queryAppUpdata_args__isset() : id(false) {}
  bool id :1;
} _AccessService_queryAppUpdata_args__isset;

class AccessService_queryAppUpdata_args {
 public:

  AccessService_queryAppUpdata_args(const AccessService_queryAppUpdata_args&);
  AccessService_queryAppUpdata_args& operator=(const AccessService_queryAppUpdata_args&);
  AccessService_queryAppUpdata_args() : id() {
  }

  virtual ~AccessService_queryAppUpdata_args() throw();
  std::string id;

  _AccessService_queryAppUpdata_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const AccessService_queryAppUpdata_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AccessService_queryAppUpdata_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_queryAppUpdata_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_queryAppUpdata_pargs {
 public:


  virtual ~AccessService_queryAppUpdata_pargs() throw();
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_queryAppUpdata_result__isset {
  _AccessService_queryAppUpdata_result__isset() : success(false) {}
  bool success :1;
} _AccessService_queryAppUpdata_result__isset;

class AccessService_queryAppUpdata_result {
 public:

  AccessService_queryAppUpdata_result(const AccessService_queryAppUpdata_result&);
  AccessService_queryAppUpdata_result& operator=(const AccessService_queryAppUpdata_result&);
  AccessService_queryAppUpdata_result() {
  }

  virtual ~AccessService_queryAppUpdata_result() throw();
  std::vector<CAppUpdataCmd>  success;

  _AccessService_queryAppUpdata_result__isset __isset;

  void __set_success(const std::vector<CAppUpdataCmd> & val);

  bool operator == (const AccessService_queryAppUpdata_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_queryAppUpdata_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_queryAppUpdata_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_queryAppUpdata_presult__isset {
  _AccessService_queryAppUpdata_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_queryAppUpdata_presult__isset;

class AccessService_queryAppUpdata_presult {
 public:


  virtual ~AccessService_queryAppUpdata_presult() throw();
  std::vector<CAppUpdataCmd> * success;

  _AccessService_queryAppUpdata_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_appUpdataStatus_args__isset {
  _AccessService_appUpdataStatus_args__isset() : gateID(false), data(false) {}
  bool gateID :1;
  bool data :1;
} _AccessService_appUpdataStatus_args__isset;

class AccessService_appUpdataStatus_args {
 public:

  AccessService_appUpdataStatus_args(const AccessService_appUpdataStatus_args&);
  AccessService_appUpdataStatus_args& operator=(const AccessService_appUpdataStatus_args&);
  AccessService_appUpdataStatus_args() : gateID() {
  }

  virtual ~AccessService_appUpdataStatus_args() throw();
  std::string gateID;
  std::vector<CAppUpdataStatus>  data;

  _AccessService_appUpdataStatus_args__isset __isset;

  void __set_gateID(const std::string& val);

  void __set_data(const std::vector<CAppUpdataStatus> & val);

  bool operator == (const AccessService_appUpdataStatus_args & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const AccessService_appUpdataStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_appUpdataStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_appUpdataStatus_pargs {
 public:


  virtual ~AccessService_appUpdataStatus_pargs() throw();
  const std::string* gateID;
  const std::vector<CAppUpdataStatus> * data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_appUpdataStatus_result__isset {
  _AccessService_appUpdataStatus_result__isset() : success(false) {}
  bool success :1;
} _AccessService_appUpdataStatus_result__isset;

class AccessService_appUpdataStatus_result {
 public:

  AccessService_appUpdataStatus_result(const AccessService_appUpdataStatus_result&);
  AccessService_appUpdataStatus_result& operator=(const AccessService_appUpdataStatus_result&);
  AccessService_appUpdataStatus_result() : success(0) {
  }

  virtual ~AccessService_appUpdataStatus_result() throw();
  bool success;

  _AccessService_appUpdataStatus_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AccessService_appUpdataStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_appUpdataStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_appUpdataStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_appUpdataStatus_presult__isset {
  _AccessService_appUpdataStatus_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_appUpdataStatus_presult__isset;

class AccessService_appUpdataStatus_presult {
 public:


  virtual ~AccessService_appUpdataStatus_presult() throw();
  bool* success;

  _AccessService_appUpdataStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_appInfo_args__isset {
  _AccessService_appInfo_args__isset() : gateID(false), data(false) {}
  bool gateID :1;
  bool data :1;
} _AccessService_appInfo_args__isset;

class AccessService_appInfo_args {
 public:

  AccessService_appInfo_args(const AccessService_appInfo_args&);
  AccessService_appInfo_args& operator=(const AccessService_appInfo_args&);
  AccessService_appInfo_args() : gateID() {
  }

  virtual ~AccessService_appInfo_args() throw();
  std::string gateID;
  std::vector<CAppInfo>  data;

  _AccessService_appInfo_args__isset __isset;

  void __set_gateID(const std::string& val);

  void __set_data(const std::vector<CAppInfo> & val);

  bool operator == (const AccessService_appInfo_args & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const AccessService_appInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_appInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_appInfo_pargs {
 public:


  virtual ~AccessService_appInfo_pargs() throw();
  const std::string* gateID;
  const std::vector<CAppInfo> * data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_appInfo_result__isset {
  _AccessService_appInfo_result__isset() : success(false) {}
  bool success :1;
} _AccessService_appInfo_result__isset;

class AccessService_appInfo_result {
 public:

  AccessService_appInfo_result(const AccessService_appInfo_result&);
  AccessService_appInfo_result& operator=(const AccessService_appInfo_result&);
  AccessService_appInfo_result() : success(0) {
  }

  virtual ~AccessService_appInfo_result() throw();
  bool success;

  _AccessService_appInfo_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AccessService_appInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_appInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_appInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_appInfo_presult__isset {
  _AccessService_appInfo_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_appInfo_presult__isset;

class AccessService_appInfo_presult {
 public:


  virtual ~AccessService_appInfo_presult() throw();
  bool* success;

  _AccessService_appInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_queryGateParams_args__isset {
  _AccessService_queryGateParams_args__isset() : id(false) {}
  bool id :1;
} _AccessService_queryGateParams_args__isset;

class AccessService_queryGateParams_args {
 public:

  AccessService_queryGateParams_args(const AccessService_queryGateParams_args&);
  AccessService_queryGateParams_args& operator=(const AccessService_queryGateParams_args&);
  AccessService_queryGateParams_args() : id() {
  }

  virtual ~AccessService_queryGateParams_args() throw();
  std::string id;

  _AccessService_queryGateParams_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const AccessService_queryGateParams_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AccessService_queryGateParams_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_queryGateParams_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_queryGateParams_pargs {
 public:


  virtual ~AccessService_queryGateParams_pargs() throw();
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_queryGateParams_result__isset {
  _AccessService_queryGateParams_result__isset() : success(false) {}
  bool success :1;
} _AccessService_queryGateParams_result__isset;

class AccessService_queryGateParams_result {
 public:

  AccessService_queryGateParams_result(const AccessService_queryGateParams_result&);
  AccessService_queryGateParams_result& operator=(const AccessService_queryGateParams_result&);
  AccessService_queryGateParams_result() {
  }

  virtual ~AccessService_queryGateParams_result() throw();
  std::vector<CGateParams>  success;

  _AccessService_queryGateParams_result__isset __isset;

  void __set_success(const std::vector<CGateParams> & val);

  bool operator == (const AccessService_queryGateParams_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_queryGateParams_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_queryGateParams_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_queryGateParams_presult__isset {
  _AccessService_queryGateParams_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_queryGateParams_presult__isset;

class AccessService_queryGateParams_presult {
 public:


  virtual ~AccessService_queryGateParams_presult() throw();
  std::vector<CGateParams> * success;

  _AccessService_queryGateParams_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_gateParams_args__isset {
  _AccessService_gateParams_args__isset() : gateID(false), data(false) {}
  bool gateID :1;
  bool data :1;
} _AccessService_gateParams_args__isset;

class AccessService_gateParams_args {
 public:

  AccessService_gateParams_args(const AccessService_gateParams_args&);
  AccessService_gateParams_args& operator=(const AccessService_gateParams_args&);
  AccessService_gateParams_args() : gateID() {
  }

  virtual ~AccessService_gateParams_args() throw();
  std::string gateID;
  std::vector<CGateParams>  data;

  _AccessService_gateParams_args__isset __isset;

  void __set_gateID(const std::string& val);

  void __set_data(const std::vector<CGateParams> & val);

  bool operator == (const AccessService_gateParams_args & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const AccessService_gateParams_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_gateParams_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_gateParams_pargs {
 public:


  virtual ~AccessService_gateParams_pargs() throw();
  const std::string* gateID;
  const std::vector<CGateParams> * data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_gateParams_result__isset {
  _AccessService_gateParams_result__isset() : success(false) {}
  bool success :1;
} _AccessService_gateParams_result__isset;

class AccessService_gateParams_result {
 public:

  AccessService_gateParams_result(const AccessService_gateParams_result&);
  AccessService_gateParams_result& operator=(const AccessService_gateParams_result&);
  AccessService_gateParams_result() : success(0) {
  }

  virtual ~AccessService_gateParams_result() throw();
  bool success;

  _AccessService_gateParams_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AccessService_gateParams_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_gateParams_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_gateParams_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_gateParams_presult__isset {
  _AccessService_gateParams_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_gateParams_presult__isset;

class AccessService_gateParams_presult {
 public:


  virtual ~AccessService_gateParams_presult() throw();
  bool* success;

  _AccessService_gateParams_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_querySetGateParams_args__isset {
  _AccessService_querySetGateParams_args__isset() : id(false) {}
  bool id :1;
} _AccessService_querySetGateParams_args__isset;

class AccessService_querySetGateParams_args {
 public:

  AccessService_querySetGateParams_args(const AccessService_querySetGateParams_args&);
  AccessService_querySetGateParams_args& operator=(const AccessService_querySetGateParams_args&);
  AccessService_querySetGateParams_args() : id() {
  }

  virtual ~AccessService_querySetGateParams_args() throw();
  std::string id;

  _AccessService_querySetGateParams_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const AccessService_querySetGateParams_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AccessService_querySetGateParams_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_querySetGateParams_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_querySetGateParams_pargs {
 public:


  virtual ~AccessService_querySetGateParams_pargs() throw();
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_querySetGateParams_result__isset {
  _AccessService_querySetGateParams_result__isset() : success(false) {}
  bool success :1;
} _AccessService_querySetGateParams_result__isset;

class AccessService_querySetGateParams_result {
 public:

  AccessService_querySetGateParams_result(const AccessService_querySetGateParams_result&);
  AccessService_querySetGateParams_result& operator=(const AccessService_querySetGateParams_result&);
  AccessService_querySetGateParams_result() {
  }

  virtual ~AccessService_querySetGateParams_result() throw();
  std::vector<CGateParams>  success;

  _AccessService_querySetGateParams_result__isset __isset;

  void __set_success(const std::vector<CGateParams> & val);

  bool operator == (const AccessService_querySetGateParams_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_querySetGateParams_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_querySetGateParams_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_querySetGateParams_presult__isset {
  _AccessService_querySetGateParams_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_querySetGateParams_presult__isset;

class AccessService_querySetGateParams_presult {
 public:


  virtual ~AccessService_querySetGateParams_presult() throw();
  std::vector<CGateParams> * success;

  _AccessService_querySetGateParams_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_setGateParams_args__isset {
  _AccessService_setGateParams_args__isset() : gateID(false), data(false) {}
  bool gateID :1;
  bool data :1;
} _AccessService_setGateParams_args__isset;

class AccessService_setGateParams_args {
 public:

  AccessService_setGateParams_args(const AccessService_setGateParams_args&);
  AccessService_setGateParams_args& operator=(const AccessService_setGateParams_args&);
  AccessService_setGateParams_args() : gateID() {
  }

  virtual ~AccessService_setGateParams_args() throw();
  std::string gateID;
  std::vector<CGateParams>  data;

  _AccessService_setGateParams_args__isset __isset;

  void __set_gateID(const std::string& val);

  void __set_data(const std::vector<CGateParams> & val);

  bool operator == (const AccessService_setGateParams_args & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const AccessService_setGateParams_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_setGateParams_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_setGateParams_pargs {
 public:


  virtual ~AccessService_setGateParams_pargs() throw();
  const std::string* gateID;
  const std::vector<CGateParams> * data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_setGateParams_result__isset {
  _AccessService_setGateParams_result__isset() : success(false) {}
  bool success :1;
} _AccessService_setGateParams_result__isset;

class AccessService_setGateParams_result {
 public:

  AccessService_setGateParams_result(const AccessService_setGateParams_result&);
  AccessService_setGateParams_result& operator=(const AccessService_setGateParams_result&);
  AccessService_setGateParams_result() : success(0) {
  }

  virtual ~AccessService_setGateParams_result() throw();
  bool success;

  _AccessService_setGateParams_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AccessService_setGateParams_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_setGateParams_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_setGateParams_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_setGateParams_presult__isset {
  _AccessService_setGateParams_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_setGateParams_presult__isset;

class AccessService_setGateParams_presult {
 public:


  virtual ~AccessService_setGateParams_presult() throw();
  bool* success;

  _AccessService_setGateParams_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_querySendSMS_args__isset {
  _AccessService_querySendSMS_args__isset() : id(false) {}
  bool id :1;
} _AccessService_querySendSMS_args__isset;

class AccessService_querySendSMS_args {
 public:

  AccessService_querySendSMS_args(const AccessService_querySendSMS_args&);
  AccessService_querySendSMS_args& operator=(const AccessService_querySendSMS_args&);
  AccessService_querySendSMS_args() : id() {
  }

  virtual ~AccessService_querySendSMS_args() throw();
  std::string id;

  _AccessService_querySendSMS_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const AccessService_querySendSMS_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AccessService_querySendSMS_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_querySendSMS_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_querySendSMS_pargs {
 public:


  virtual ~AccessService_querySendSMS_pargs() throw();
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_querySendSMS_result__isset {
  _AccessService_querySendSMS_result__isset() : success(false) {}
  bool success :1;
} _AccessService_querySendSMS_result__isset;

class AccessService_querySendSMS_result {
 public:

  AccessService_querySendSMS_result(const AccessService_querySendSMS_result&);
  AccessService_querySendSMS_result& operator=(const AccessService_querySendSMS_result&);
  AccessService_querySendSMS_result() {
  }

  virtual ~AccessService_querySendSMS_result() throw();
  std::vector<CSMS>  success;

  _AccessService_querySendSMS_result__isset __isset;

  void __set_success(const std::vector<CSMS> & val);

  bool operator == (const AccessService_querySendSMS_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_querySendSMS_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_querySendSMS_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_querySendSMS_presult__isset {
  _AccessService_querySendSMS_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_querySendSMS_presult__isset;

class AccessService_querySendSMS_presult {
 public:


  virtual ~AccessService_querySendSMS_presult() throw();
  std::vector<CSMS> * success;

  _AccessService_querySendSMS_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_getSMS_args__isset {
  _AccessService_getSMS_args__isset() : data(false) {}
  bool data :1;
} _AccessService_getSMS_args__isset;

class AccessService_getSMS_args {
 public:

  AccessService_getSMS_args(const AccessService_getSMS_args&);
  AccessService_getSMS_args& operator=(const AccessService_getSMS_args&);
  AccessService_getSMS_args() {
  }

  virtual ~AccessService_getSMS_args() throw();
  std::vector<CSMS>  data;

  _AccessService_getSMS_args__isset __isset;

  void __set_data(const std::vector<CSMS> & val);

  bool operator == (const AccessService_getSMS_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const AccessService_getSMS_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_getSMS_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_getSMS_pargs {
 public:


  virtual ~AccessService_getSMS_pargs() throw();
  const std::vector<CSMS> * data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_getSMS_result__isset {
  _AccessService_getSMS_result__isset() : success(false) {}
  bool success :1;
} _AccessService_getSMS_result__isset;

class AccessService_getSMS_result {
 public:

  AccessService_getSMS_result(const AccessService_getSMS_result&);
  AccessService_getSMS_result& operator=(const AccessService_getSMS_result&);
  AccessService_getSMS_result() : success(0) {
  }

  virtual ~AccessService_getSMS_result() throw();
  bool success;

  _AccessService_getSMS_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AccessService_getSMS_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_getSMS_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_getSMS_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_getSMS_presult__isset {
  _AccessService_getSMS_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_getSMS_presult__isset;

class AccessService_getSMS_presult {
 public:


  virtual ~AccessService_getSMS_presult() throw();
  bool* success;

  _AccessService_getSMS_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_sendLog_args__isset {
  _AccessService_sendLog_args__isset() : id(false), ip(false), lv(false), time(false), log(false) {}
  bool id :1;
  bool ip :1;
  bool lv :1;
  bool time :1;
  bool log :1;
} _AccessService_sendLog_args__isset;

class AccessService_sendLog_args {
 public:

  AccessService_sendLog_args(const AccessService_sendLog_args&);
  AccessService_sendLog_args& operator=(const AccessService_sendLog_args&);
  AccessService_sendLog_args() : id(), ip(), lv(0), time(0), log() {
  }

  virtual ~AccessService_sendLog_args() throw();
  std::string id;
  std::string ip;
  int32_t lv;
  int64_t time;
  std::string log;

  _AccessService_sendLog_args__isset __isset;

  void __set_id(const std::string& val);

  void __set_ip(const std::string& val);

  void __set_lv(const int32_t val);

  void __set_time(const int64_t val);

  void __set_log(const std::string& val);

  bool operator == (const AccessService_sendLog_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(lv == rhs.lv))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(log == rhs.log))
      return false;
    return true;
  }
  bool operator != (const AccessService_sendLog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_sendLog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_sendLog_pargs {
 public:


  virtual ~AccessService_sendLog_pargs() throw();
  const std::string* id;
  const std::string* ip;
  const int32_t* lv;
  const int64_t* time;
  const std::string* log;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_sendLog_result {
 public:

  AccessService_sendLog_result(const AccessService_sendLog_result&);
  AccessService_sendLog_result& operator=(const AccessService_sendLog_result&);
  AccessService_sendLog_result() {
  }

  virtual ~AccessService_sendLog_result() throw();

  bool operator == (const AccessService_sendLog_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessService_sendLog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_sendLog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_sendLog_presult {
 public:


  virtual ~AccessService_sendLog_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_query_args__isset {
  _AccessService_query_args__isset() : id(false) {}
  bool id :1;
} _AccessService_query_args__isset;

class AccessService_query_args {
 public:

  AccessService_query_args(const AccessService_query_args&);
  AccessService_query_args& operator=(const AccessService_query_args&);
  AccessService_query_args() : id() {
  }

  virtual ~AccessService_query_args() throw();
  std::string id;

  _AccessService_query_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const AccessService_query_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AccessService_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_query_pargs {
 public:


  virtual ~AccessService_query_pargs() throw();
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_query_result__isset {
  _AccessService_query_result__isset() : success(false) {}
  bool success :1;
} _AccessService_query_result__isset;

class AccessService_query_result {
 public:

  AccessService_query_result(const AccessService_query_result&);
  AccessService_query_result& operator=(const AccessService_query_result&);
  AccessService_query_result() {
  }

  virtual ~AccessService_query_result() throw();
  std::vector<CQuery>  success;

  _AccessService_query_result__isset __isset;

  void __set_success(const std::vector<CQuery> & val);

  bool operator == (const AccessService_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_query_presult__isset {
  _AccessService_query_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_query_presult__isset;

class AccessService_query_presult {
 public:


  virtual ~AccessService_query_presult() throw();
  std::vector<CQuery> * success;

  _AccessService_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_reply_args__isset {
  _AccessService_reply_args__isset() : id(false), type(false), gateID(false), time(false), text(false) {}
  bool id :1;
  bool type :1;
  bool gateID :1;
  bool time :1;
  bool text :1;
} _AccessService_reply_args__isset;

class AccessService_reply_args {
 public:

  AccessService_reply_args(const AccessService_reply_args&);
  AccessService_reply_args& operator=(const AccessService_reply_args&);
  AccessService_reply_args() : id(), type(0), gateID(), time(0), text() {
  }

  virtual ~AccessService_reply_args() throw();
  std::string id;
  int32_t type;
  std::string gateID;
  int64_t time;
  std::string text;

  _AccessService_reply_args__isset __isset;

  void __set_id(const std::string& val);

  void __set_type(const int32_t val);

  void __set_gateID(const std::string& val);

  void __set_time(const int64_t val);

  void __set_text(const std::string& val);

  bool operator == (const AccessService_reply_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(gateID == rhs.gateID))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const AccessService_reply_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_reply_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_reply_pargs {
 public:


  virtual ~AccessService_reply_pargs() throw();
  const std::string* id;
  const int32_t* type;
  const std::string* gateID;
  const int64_t* time;
  const std::string* text;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_reply_result {
 public:

  AccessService_reply_result(const AccessService_reply_result&);
  AccessService_reply_result& operator=(const AccessService_reply_result&);
  AccessService_reply_result() {
  }

  virtual ~AccessService_reply_result() throw();

  bool operator == (const AccessService_reply_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccessService_reply_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_reply_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_reply_presult {
 public:


  virtual ~AccessService_reply_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_alarm_args__isset {
  _AccessService_alarm_args__isset() : gateID(false), alms(false) {}
  bool gateID :1;
  bool alms :1;
} _AccessService_alarm_args__isset;

class AccessService_alarm_args {
 public:

  AccessService_alarm_args(const AccessService_alarm_args&);
  AccessService_alarm_args& operator=(const AccessService_alarm_args&);
  AccessService_alarm_args() : gateID() {
  }

  virtual ~AccessService_alarm_args() throw();
  std::string gateID;
  std::vector<CAlarm>  alms;

  _AccessService_alarm_args__isset __isset;

  void __set_gateID(const std::string& val);

  void __set_alms(const std::vector<CAlarm> & val);

  bool operator == (const AccessService_alarm_args & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    if (!(alms == rhs.alms))
      return false;
    return true;
  }
  bool operator != (const AccessService_alarm_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_alarm_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_alarm_pargs {
 public:


  virtual ~AccessService_alarm_pargs() throw();
  const std::string* gateID;
  const std::vector<CAlarm> * alms;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_alarm_result__isset {
  _AccessService_alarm_result__isset() : success(false) {}
  bool success :1;
} _AccessService_alarm_result__isset;

class AccessService_alarm_result {
 public:

  AccessService_alarm_result(const AccessService_alarm_result&);
  AccessService_alarm_result& operator=(const AccessService_alarm_result&);
  AccessService_alarm_result() : success(0) {
  }

  virtual ~AccessService_alarm_result() throw();
  bool success;

  _AccessService_alarm_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AccessService_alarm_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_alarm_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_alarm_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_alarm_presult__isset {
  _AccessService_alarm_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_alarm_presult__isset;

class AccessService_alarm_presult {
 public:


  virtual ~AccessService_alarm_presult() throw();
  bool* success;

  _AccessService_alarm_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccessService_alarmMatch_args__isset {
  _AccessService_alarmMatch_args__isset() : gateID(false), devType(false), devIndex(false), alms(false) {}
  bool gateID :1;
  bool devType :1;
  bool devIndex :1;
  bool alms :1;
} _AccessService_alarmMatch_args__isset;

class AccessService_alarmMatch_args {
 public:

  AccessService_alarmMatch_args(const AccessService_alarmMatch_args&);
  AccessService_alarmMatch_args& operator=(const AccessService_alarmMatch_args&);
  AccessService_alarmMatch_args() : gateID(), devType(0), devIndex(0) {
  }

  virtual ~AccessService_alarmMatch_args() throw();
  std::string gateID;
  int32_t devType;
  int32_t devIndex;
  std::vector<CAlarmMatch>  alms;

  _AccessService_alarmMatch_args__isset __isset;

  void __set_gateID(const std::string& val);

  void __set_devType(const int32_t val);

  void __set_devIndex(const int32_t val);

  void __set_alms(const std::vector<CAlarmMatch> & val);

  bool operator == (const AccessService_alarmMatch_args & rhs) const
  {
    if (!(gateID == rhs.gateID))
      return false;
    if (!(devType == rhs.devType))
      return false;
    if (!(devIndex == rhs.devIndex))
      return false;
    if (!(alms == rhs.alms))
      return false;
    return true;
  }
  bool operator != (const AccessService_alarmMatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_alarmMatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccessService_alarmMatch_pargs {
 public:


  virtual ~AccessService_alarmMatch_pargs() throw();
  const std::string* gateID;
  const int32_t* devType;
  const int32_t* devIndex;
  const std::vector<CAlarmMatch> * alms;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_alarmMatch_result__isset {
  _AccessService_alarmMatch_result__isset() : success(false) {}
  bool success :1;
} _AccessService_alarmMatch_result__isset;

class AccessService_alarmMatch_result {
 public:

  AccessService_alarmMatch_result(const AccessService_alarmMatch_result&);
  AccessService_alarmMatch_result& operator=(const AccessService_alarmMatch_result&);
  AccessService_alarmMatch_result() : success(0) {
  }

  virtual ~AccessService_alarmMatch_result() throw();
  bool success;

  _AccessService_alarmMatch_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AccessService_alarmMatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccessService_alarmMatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessService_alarmMatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccessService_alarmMatch_presult__isset {
  _AccessService_alarmMatch_presult__isset() : success(false) {}
  bool success :1;
} _AccessService_alarmMatch_presult__isset;

class AccessService_alarmMatch_presult {
 public:


  virtual ~AccessService_alarmMatch_presult() throw();
  bool* success;

  _AccessService_alarmMatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AccessServiceClient : virtual public AccessServiceIf {
 public:
  AccessServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AccessServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void test();
  void send_test();
  void recv_test();
  void online(const std::string& id, const std::string& mac, const std::string& ip);
  void send_online(const std::string& id, const std::string& mac, const std::string& ip);
  void recv_online();
  void alive(const std::string& id);
  void send_alive(const std::string& id);
  void recv_alive();
  void offline(const std::string& id);
  void send_offline(const std::string& id);
  void recv_offline();
  void gates(const std::string& id, const std::vector<CGate> & gs);
  void send_gates(const std::string& id, const std::vector<CGate> & gs);
  void recv_gates();
  bool btyAlms(const std::string& id, const std::vector<CBtyAlarm> & alms, const int32_t zone);
  void send_btyAlms(const std::string& id, const std::vector<CBtyAlarm> & alms, const int32_t zone);
  bool recv_btyAlms();
  void btyAlmMatch(const std::string& id, const std::string& gateID, const std::vector<CBtyAlarm> & alms, const int32_t zone);
  void send_btyAlmMatch(const std::string& id, const std::string& gateID, const std::vector<CBtyAlarm> & alms, const int32_t zone);
  void recv_btyAlmMatch();
  void queryBattery(std::vector<CBtyCmd> & _return, const std::string& id);
  void send_queryBattery(const std::string& id);
  void recv_queryBattery(std::vector<CBtyCmd> & _return);
  void btyRTDataEx(const std::vector<CBatteryBankData> & data, const int32_t zone);
  void send_btyRTDataEx(const std::vector<CBatteryBankData> & data, const int32_t zone);
  void recv_btyRTDataEx();
  bool btyHisDataEx(const std::vector<CBatteryBankData> & data, const int32_t zone);
  void send_btyHisDataEx(const std::vector<CBatteryBankData> & data, const int32_t zone);
  bool recv_btyHisDataEx();
  bool btyStatus(const std::vector<CBtyBankStatus> & data, const int32_t zone);
  void send_btyStatus(const std::vector<CBtyBankStatus> & data, const int32_t zone);
  bool recv_btyStatus();
  void queryResTest(std::vector<CBtyResTestCmd> & _return, const std::string& id);
  void send_queryResTest(const std::string& id);
  void recv_queryResTest(std::vector<CBtyResTestCmd> & _return);
  bool btyResTestResult(const std::string& gateID, const std::string& bankID, const int32_t result);
  void send_btyResTestResult(const std::string& gateID, const std::string& bankID, const int32_t result);
  bool recv_btyResTestResult();
  bool btyRes(const std::string& gateID, const std::vector<CBatteryResData> & data, const int32_t zone);
  void send_btyRes(const std::string& gateID, const std::vector<CBatteryResData> & data, const int32_t zone);
  bool recv_btyRes();
  bool generalData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CGeneralData> & data);
  void send_generalData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CGeneralData> & data);
  bool recv_generalData();
  bool meterData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CMeterData> & data);
  void send_meterData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CMeterData> & data);
  bool recv_meterData();
  bool configData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CConfigData> & data);
  void send_configData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CConfigData> & data);
  bool recv_configData();
  void configSetResult(const std::string& gateID, const std::vector<CConfigData> & data);
  void send_configSetResult(const std::string& gateID, const std::vector<CConfigData> & data);
  void recv_configSetResult();
  void queryAppUpdata(std::vector<CAppUpdataCmd> & _return, const std::string& id);
  void send_queryAppUpdata(const std::string& id);
  void recv_queryAppUpdata(std::vector<CAppUpdataCmd> & _return);
  bool appUpdataStatus(const std::string& gateID, const std::vector<CAppUpdataStatus> & data);
  void send_appUpdataStatus(const std::string& gateID, const std::vector<CAppUpdataStatus> & data);
  bool recv_appUpdataStatus();
  bool appInfo(const std::string& gateID, const std::vector<CAppInfo> & data);
  void send_appInfo(const std::string& gateID, const std::vector<CAppInfo> & data);
  bool recv_appInfo();
  void queryGateParams(std::vector<CGateParams> & _return, const std::string& id);
  void send_queryGateParams(const std::string& id);
  void recv_queryGateParams(std::vector<CGateParams> & _return);
  bool gateParams(const std::string& gateID, const std::vector<CGateParams> & data);
  void send_gateParams(const std::string& gateID, const std::vector<CGateParams> & data);
  bool recv_gateParams();
  void querySetGateParams(std::vector<CGateParams> & _return, const std::string& id);
  void send_querySetGateParams(const std::string& id);
  void recv_querySetGateParams(std::vector<CGateParams> & _return);
  bool setGateParams(const std::string& gateID, const std::vector<CGateParams> & data);
  void send_setGateParams(const std::string& gateID, const std::vector<CGateParams> & data);
  bool recv_setGateParams();
  void querySendSMS(std::vector<CSMS> & _return, const std::string& id);
  void send_querySendSMS(const std::string& id);
  void recv_querySendSMS(std::vector<CSMS> & _return);
  bool getSMS(const std::vector<CSMS> & data);
  void send_getSMS(const std::vector<CSMS> & data);
  bool recv_getSMS();
  void sendLog(const std::string& id, const std::string& ip, const int32_t lv, const int64_t time, const std::string& log);
  void send_sendLog(const std::string& id, const std::string& ip, const int32_t lv, const int64_t time, const std::string& log);
  void recv_sendLog();
  void query(std::vector<CQuery> & _return, const std::string& id);
  void send_query(const std::string& id);
  void recv_query(std::vector<CQuery> & _return);
  void reply(const std::string& id, const int32_t type, const std::string& gateID, const int64_t time, const std::string& text);
  void send_reply(const std::string& id, const int32_t type, const std::string& gateID, const int64_t time, const std::string& text);
  void recv_reply();
  bool alarm(const std::string& gateID, const std::vector<CAlarm> & alms);
  void send_alarm(const std::string& gateID, const std::vector<CAlarm> & alms);
  bool recv_alarm();
  bool alarmMatch(const std::string& gateID, const int32_t devType, const int32_t devIndex, const std::vector<CAlarmMatch> & alms);
  void send_alarmMatch(const std::string& gateID, const int32_t devType, const int32_t devIndex, const std::vector<CAlarmMatch> & alms);
  bool recv_alarmMatch();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AccessServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AccessServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AccessServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_test(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_online(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_alive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_offline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_gates(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_btyAlms(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_btyAlmMatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryBattery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_btyRTDataEx(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_btyHisDataEx(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_btyStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryResTest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_btyResTestResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_btyRes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_generalData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_meterData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_configData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_configSetResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryAppUpdata(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_appUpdataStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_appInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryGateParams(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_gateParams(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_querySetGateParams(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setGateParams(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_querySendSMS(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSMS(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendLog(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reply(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_alarm(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_alarmMatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AccessServiceProcessor(boost::shared_ptr<AccessServiceIf> iface) :
    iface_(iface) {
    processMap_["test"] = &AccessServiceProcessor::process_test;
    processMap_["online"] = &AccessServiceProcessor::process_online;
    processMap_["alive"] = &AccessServiceProcessor::process_alive;
    processMap_["offline"] = &AccessServiceProcessor::process_offline;
    processMap_["gates"] = &AccessServiceProcessor::process_gates;
    processMap_["btyAlms"] = &AccessServiceProcessor::process_btyAlms;
    processMap_["btyAlmMatch"] = &AccessServiceProcessor::process_btyAlmMatch;
    processMap_["queryBattery"] = &AccessServiceProcessor::process_queryBattery;
    processMap_["btyRTDataEx"] = &AccessServiceProcessor::process_btyRTDataEx;
    processMap_["btyHisDataEx"] = &AccessServiceProcessor::process_btyHisDataEx;
    processMap_["btyStatus"] = &AccessServiceProcessor::process_btyStatus;
    processMap_["queryResTest"] = &AccessServiceProcessor::process_queryResTest;
    processMap_["btyResTestResult"] = &AccessServiceProcessor::process_btyResTestResult;
    processMap_["btyRes"] = &AccessServiceProcessor::process_btyRes;
    processMap_["generalData"] = &AccessServiceProcessor::process_generalData;
    processMap_["meterData"] = &AccessServiceProcessor::process_meterData;
    processMap_["configData"] = &AccessServiceProcessor::process_configData;
    processMap_["configSetResult"] = &AccessServiceProcessor::process_configSetResult;
    processMap_["queryAppUpdata"] = &AccessServiceProcessor::process_queryAppUpdata;
    processMap_["appUpdataStatus"] = &AccessServiceProcessor::process_appUpdataStatus;
    processMap_["appInfo"] = &AccessServiceProcessor::process_appInfo;
    processMap_["queryGateParams"] = &AccessServiceProcessor::process_queryGateParams;
    processMap_["gateParams"] = &AccessServiceProcessor::process_gateParams;
    processMap_["querySetGateParams"] = &AccessServiceProcessor::process_querySetGateParams;
    processMap_["setGateParams"] = &AccessServiceProcessor::process_setGateParams;
    processMap_["querySendSMS"] = &AccessServiceProcessor::process_querySendSMS;
    processMap_["getSMS"] = &AccessServiceProcessor::process_getSMS;
    processMap_["sendLog"] = &AccessServiceProcessor::process_sendLog;
    processMap_["query"] = &AccessServiceProcessor::process_query;
    processMap_["reply"] = &AccessServiceProcessor::process_reply;
    processMap_["alarm"] = &AccessServiceProcessor::process_alarm;
    processMap_["alarmMatch"] = &AccessServiceProcessor::process_alarmMatch;
  }

  virtual ~AccessServiceProcessor() {}
};

class AccessServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AccessServiceProcessorFactory(const ::boost::shared_ptr< AccessServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AccessServiceIfFactory > handlerFactory_;
};

class AccessServiceMultiface : virtual public AccessServiceIf {
 public:
  AccessServiceMultiface(std::vector<boost::shared_ptr<AccessServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AccessServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AccessServiceIf> > ifaces_;
  AccessServiceMultiface() {}
  void add(boost::shared_ptr<AccessServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void test() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->test();
    }
    ifaces_[i]->test();
  }

  void online(const std::string& id, const std::string& mac, const std::string& ip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->online(id, mac, ip);
    }
    ifaces_[i]->online(id, mac, ip);
  }

  void alive(const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->alive(id);
    }
    ifaces_[i]->alive(id);
  }

  void offline(const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->offline(id);
    }
    ifaces_[i]->offline(id);
  }

  void gates(const std::string& id, const std::vector<CGate> & gs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->gates(id, gs);
    }
    ifaces_[i]->gates(id, gs);
  }

  bool btyAlms(const std::string& id, const std::vector<CBtyAlarm> & alms, const int32_t zone) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->btyAlms(id, alms, zone);
    }
    return ifaces_[i]->btyAlms(id, alms, zone);
  }

  void btyAlmMatch(const std::string& id, const std::string& gateID, const std::vector<CBtyAlarm> & alms, const int32_t zone) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->btyAlmMatch(id, gateID, alms, zone);
    }
    ifaces_[i]->btyAlmMatch(id, gateID, alms, zone);
  }

  void queryBattery(std::vector<CBtyCmd> & _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryBattery(_return, id);
    }
    ifaces_[i]->queryBattery(_return, id);
    return;
  }

  void btyRTDataEx(const std::vector<CBatteryBankData> & data, const int32_t zone) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->btyRTDataEx(data, zone);
    }
    ifaces_[i]->btyRTDataEx(data, zone);
  }

  bool btyHisDataEx(const std::vector<CBatteryBankData> & data, const int32_t zone) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->btyHisDataEx(data, zone);
    }
    return ifaces_[i]->btyHisDataEx(data, zone);
  }

  bool btyStatus(const std::vector<CBtyBankStatus> & data, const int32_t zone) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->btyStatus(data, zone);
    }
    return ifaces_[i]->btyStatus(data, zone);
  }

  void queryResTest(std::vector<CBtyResTestCmd> & _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryResTest(_return, id);
    }
    ifaces_[i]->queryResTest(_return, id);
    return;
  }

  bool btyResTestResult(const std::string& gateID, const std::string& bankID, const int32_t result) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->btyResTestResult(gateID, bankID, result);
    }
    return ifaces_[i]->btyResTestResult(gateID, bankID, result);
  }

  bool btyRes(const std::string& gateID, const std::vector<CBatteryResData> & data, const int32_t zone) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->btyRes(gateID, data, zone);
    }
    return ifaces_[i]->btyRes(gateID, data, zone);
  }

  bool generalData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CGeneralData> & data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->generalData(gateID, zone, time, data);
    }
    return ifaces_[i]->generalData(gateID, zone, time, data);
  }

  bool meterData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CMeterData> & data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->meterData(gateID, zone, time, data);
    }
    return ifaces_[i]->meterData(gateID, zone, time, data);
  }

  bool configData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CConfigData> & data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->configData(gateID, zone, time, data);
    }
    return ifaces_[i]->configData(gateID, zone, time, data);
  }

  void configSetResult(const std::string& gateID, const std::vector<CConfigData> & data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->configSetResult(gateID, data);
    }
    ifaces_[i]->configSetResult(gateID, data);
  }

  void queryAppUpdata(std::vector<CAppUpdataCmd> & _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryAppUpdata(_return, id);
    }
    ifaces_[i]->queryAppUpdata(_return, id);
    return;
  }

  bool appUpdataStatus(const std::string& gateID, const std::vector<CAppUpdataStatus> & data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->appUpdataStatus(gateID, data);
    }
    return ifaces_[i]->appUpdataStatus(gateID, data);
  }

  bool appInfo(const std::string& gateID, const std::vector<CAppInfo> & data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->appInfo(gateID, data);
    }
    return ifaces_[i]->appInfo(gateID, data);
  }

  void queryGateParams(std::vector<CGateParams> & _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryGateParams(_return, id);
    }
    ifaces_[i]->queryGateParams(_return, id);
    return;
  }

  bool gateParams(const std::string& gateID, const std::vector<CGateParams> & data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->gateParams(gateID, data);
    }
    return ifaces_[i]->gateParams(gateID, data);
  }

  void querySetGateParams(std::vector<CGateParams> & _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->querySetGateParams(_return, id);
    }
    ifaces_[i]->querySetGateParams(_return, id);
    return;
  }

  bool setGateParams(const std::string& gateID, const std::vector<CGateParams> & data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setGateParams(gateID, data);
    }
    return ifaces_[i]->setGateParams(gateID, data);
  }

  void querySendSMS(std::vector<CSMS> & _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->querySendSMS(_return, id);
    }
    ifaces_[i]->querySendSMS(_return, id);
    return;
  }

  bool getSMS(const std::vector<CSMS> & data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSMS(data);
    }
    return ifaces_[i]->getSMS(data);
  }

  void sendLog(const std::string& id, const std::string& ip, const int32_t lv, const int64_t time, const std::string& log) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendLog(id, ip, lv, time, log);
    }
    ifaces_[i]->sendLog(id, ip, lv, time, log);
  }

  void query(std::vector<CQuery> & _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query(_return, id);
    }
    ifaces_[i]->query(_return, id);
    return;
  }

  void reply(const std::string& id, const int32_t type, const std::string& gateID, const int64_t time, const std::string& text) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reply(id, type, gateID, time, text);
    }
    ifaces_[i]->reply(id, type, gateID, time, text);
  }

  bool alarm(const std::string& gateID, const std::vector<CAlarm> & alms) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->alarm(gateID, alms);
    }
    return ifaces_[i]->alarm(gateID, alms);
  }

  bool alarmMatch(const std::string& gateID, const int32_t devType, const int32_t devIndex, const std::vector<CAlarmMatch> & alms) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->alarmMatch(gateID, devType, devIndex, alms);
    }
    return ifaces_[i]->alarmMatch(gateID, devType, devIndex, alms);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AccessServiceConcurrentClient : virtual public AccessServiceIf {
 public:
  AccessServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AccessServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void test();
  int32_t send_test();
  void recv_test(const int32_t seqid);
  void online(const std::string& id, const std::string& mac, const std::string& ip);
  int32_t send_online(const std::string& id, const std::string& mac, const std::string& ip);
  void recv_online(const int32_t seqid);
  void alive(const std::string& id);
  int32_t send_alive(const std::string& id);
  void recv_alive(const int32_t seqid);
  void offline(const std::string& id);
  int32_t send_offline(const std::string& id);
  void recv_offline(const int32_t seqid);
  void gates(const std::string& id, const std::vector<CGate> & gs);
  int32_t send_gates(const std::string& id, const std::vector<CGate> & gs);
  void recv_gates(const int32_t seqid);
  bool btyAlms(const std::string& id, const std::vector<CBtyAlarm> & alms, const int32_t zone);
  int32_t send_btyAlms(const std::string& id, const std::vector<CBtyAlarm> & alms, const int32_t zone);
  bool recv_btyAlms(const int32_t seqid);
  void btyAlmMatch(const std::string& id, const std::string& gateID, const std::vector<CBtyAlarm> & alms, const int32_t zone);
  int32_t send_btyAlmMatch(const std::string& id, const std::string& gateID, const std::vector<CBtyAlarm> & alms, const int32_t zone);
  void recv_btyAlmMatch(const int32_t seqid);
  void queryBattery(std::vector<CBtyCmd> & _return, const std::string& id);
  int32_t send_queryBattery(const std::string& id);
  void recv_queryBattery(std::vector<CBtyCmd> & _return, const int32_t seqid);
  void btyRTDataEx(const std::vector<CBatteryBankData> & data, const int32_t zone);
  int32_t send_btyRTDataEx(const std::vector<CBatteryBankData> & data, const int32_t zone);
  void recv_btyRTDataEx(const int32_t seqid);
  bool btyHisDataEx(const std::vector<CBatteryBankData> & data, const int32_t zone);
  int32_t send_btyHisDataEx(const std::vector<CBatteryBankData> & data, const int32_t zone);
  bool recv_btyHisDataEx(const int32_t seqid);
  bool btyStatus(const std::vector<CBtyBankStatus> & data, const int32_t zone);
  int32_t send_btyStatus(const std::vector<CBtyBankStatus> & data, const int32_t zone);
  bool recv_btyStatus(const int32_t seqid);
  void queryResTest(std::vector<CBtyResTestCmd> & _return, const std::string& id);
  int32_t send_queryResTest(const std::string& id);
  void recv_queryResTest(std::vector<CBtyResTestCmd> & _return, const int32_t seqid);
  bool btyResTestResult(const std::string& gateID, const std::string& bankID, const int32_t result);
  int32_t send_btyResTestResult(const std::string& gateID, const std::string& bankID, const int32_t result);
  bool recv_btyResTestResult(const int32_t seqid);
  bool btyRes(const std::string& gateID, const std::vector<CBatteryResData> & data, const int32_t zone);
  int32_t send_btyRes(const std::string& gateID, const std::vector<CBatteryResData> & data, const int32_t zone);
  bool recv_btyRes(const int32_t seqid);
  bool generalData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CGeneralData> & data);
  int32_t send_generalData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CGeneralData> & data);
  bool recv_generalData(const int32_t seqid);
  bool meterData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CMeterData> & data);
  int32_t send_meterData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CMeterData> & data);
  bool recv_meterData(const int32_t seqid);
  bool configData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CConfigData> & data);
  int32_t send_configData(const std::string& gateID, const int32_t zone, const int64_t time, const std::vector<CConfigData> & data);
  bool recv_configData(const int32_t seqid);
  void configSetResult(const std::string& gateID, const std::vector<CConfigData> & data);
  int32_t send_configSetResult(const std::string& gateID, const std::vector<CConfigData> & data);
  void recv_configSetResult(const int32_t seqid);
  void queryAppUpdata(std::vector<CAppUpdataCmd> & _return, const std::string& id);
  int32_t send_queryAppUpdata(const std::string& id);
  void recv_queryAppUpdata(std::vector<CAppUpdataCmd> & _return, const int32_t seqid);
  bool appUpdataStatus(const std::string& gateID, const std::vector<CAppUpdataStatus> & data);
  int32_t send_appUpdataStatus(const std::string& gateID, const std::vector<CAppUpdataStatus> & data);
  bool recv_appUpdataStatus(const int32_t seqid);
  bool appInfo(const std::string& gateID, const std::vector<CAppInfo> & data);
  int32_t send_appInfo(const std::string& gateID, const std::vector<CAppInfo> & data);
  bool recv_appInfo(const int32_t seqid);
  void queryGateParams(std::vector<CGateParams> & _return, const std::string& id);
  int32_t send_queryGateParams(const std::string& id);
  void recv_queryGateParams(std::vector<CGateParams> & _return, const int32_t seqid);
  bool gateParams(const std::string& gateID, const std::vector<CGateParams> & data);
  int32_t send_gateParams(const std::string& gateID, const std::vector<CGateParams> & data);
  bool recv_gateParams(const int32_t seqid);
  void querySetGateParams(std::vector<CGateParams> & _return, const std::string& id);
  int32_t send_querySetGateParams(const std::string& id);
  void recv_querySetGateParams(std::vector<CGateParams> & _return, const int32_t seqid);
  bool setGateParams(const std::string& gateID, const std::vector<CGateParams> & data);
  int32_t send_setGateParams(const std::string& gateID, const std::vector<CGateParams> & data);
  bool recv_setGateParams(const int32_t seqid);
  void querySendSMS(std::vector<CSMS> & _return, const std::string& id);
  int32_t send_querySendSMS(const std::string& id);
  void recv_querySendSMS(std::vector<CSMS> & _return, const int32_t seqid);
  bool getSMS(const std::vector<CSMS> & data);
  int32_t send_getSMS(const std::vector<CSMS> & data);
  bool recv_getSMS(const int32_t seqid);
  void sendLog(const std::string& id, const std::string& ip, const int32_t lv, const int64_t time, const std::string& log);
  int32_t send_sendLog(const std::string& id, const std::string& ip, const int32_t lv, const int64_t time, const std::string& log);
  void recv_sendLog(const int32_t seqid);
  void query(std::vector<CQuery> & _return, const std::string& id);
  int32_t send_query(const std::string& id);
  void recv_query(std::vector<CQuery> & _return, const int32_t seqid);
  void reply(const std::string& id, const int32_t type, const std::string& gateID, const int64_t time, const std::string& text);
  int32_t send_reply(const std::string& id, const int32_t type, const std::string& gateID, const int64_t time, const std::string& text);
  void recv_reply(const int32_t seqid);
  bool alarm(const std::string& gateID, const std::vector<CAlarm> & alms);
  int32_t send_alarm(const std::string& gateID, const std::vector<CAlarm> & alms);
  bool recv_alarm(const int32_t seqid);
  bool alarmMatch(const std::string& gateID, const int32_t devType, const int32_t devIndex, const std::vector<CAlarmMatch> & alms);
  int32_t send_alarmMatch(const std::string& gateID, const int32_t devType, const int32_t devIndex, const std::vector<CAlarmMatch> & alms);
  bool recv_alarmMatch(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
